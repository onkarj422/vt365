{
  "version": 3,
  "file": "angular-timesince.umd.js",
  "sources": [
    "~/@thisissoon/angular-timesince/angular-timesince.ts",
    "~/@thisissoon/angular-timesince/src/app/time-since/time-since.module.ts",
    "~/@thisissoon/angular-timesince/src/app/time-since/time-since.pipe.ts",
    "~/@thisissoon/angular-timesince/src/app/time-since/shared/durations.ts"
  ],
  "sourcesContent": [
    "/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n",
    "import { NgModule } from '@angular/core';\n\nimport { TimeSincePipe } from './time-since.pipe';\n\n/**\n * A simple lightweight library for Angular 2/4+ which returns the\n * number of seconds, minutes, days, months or years since any Date\n * object based on the current system time\n *\n * @export\n * @class TimeSinceModule\n */\n@NgModule({\n  declarations: [TimeSincePipe],\n  exports: [TimeSincePipe]\n})\nexport class TimeSinceModule { }\n",
    "import { Pipe, PipeTransform } from '@angular/core';\n\nimport * as durations from './shared/durations';\n\n/**\n * Based on {@link http://stackoverflow.com/questions/3177836/how-to-format-time-since-xxx-e-g-4-minutes-ago-similar-to-stack-exchange-site}\n * Returns the number of seconds, minutes, days, months or years since\n * any Date object based on the current system time\n *\n * @example\n * ```html\n *  <p>{{ date | timeSince }} ago</p>\n * ```\n *\n * @export\n * @class TimeSincePipe\n * @implements {PipeTransform}\n */\n@Pipe({\n  name: 'timeSince'\n})\nexport class TimeSincePipe implements PipeTransform {\n  /**\n   * Attempt to convert the input into a Date object and return the original\n   * input if not a valid date. If input is a valid date then calculate the\n   * time in seconds from Date Object to 'now'. Then try to divide the number\n   * of seconds between now and the date by the number of seconds in a year,\n   * month, day, hour or minute\n   *\n   *\n   * @param {*} value\n   * @param {*} [args]\n   * @returns {*}\n   * @memberof TimeSincePipe\n   */\n  public transform(value: any, args?: any): any {\n    const date: Date = new Date(value);\n\n    if (isNaN(date.getTime())) {\n      return value;\n    }\n\n    const seconds = Math.abs(\n      Math.floor(\n        (new Date().getTime() - date.getTime()) / durations.millisecondsInSecond\n      )\n    );\n\n    let interval = Math.floor(seconds / durations.secondsInYear);\n\n    if (interval > 1) { return `${interval} years`; }\n    if (interval === 1) { return `${interval} year`; }\n\n    interval = Math.floor(seconds / durations.secondsInMonth);\n\n    if (interval > 1) { return `${interval} months`; }\n    if (interval === 1) { return `${interval} month`; }\n\n    interval = Math.floor(seconds / durations.secondsInDay);\n\n    if (interval > 1) { return `${interval} days`; }\n    if (interval === 1) { return `${interval} day`; }\n\n    interval = Math.floor(seconds / durations.secondsInHour);\n\n    if (interval > 1) { return `${interval} hours`; }\n    if (interval === 1) { return `${interval} hour`; }\n\n    interval = Math.floor(seconds / durations.secondsInMin);\n\n    if (interval > 1) { return `${interval} minutes`; }\n    if (interval === 1) { return `${interval} minute`; }\n\n    return `${Math.floor(seconds)} ${seconds === 1 ? 'second' : 'seconds'}`;\n  }\n}\n",
    "export const secondsInYear = 31536000;\nexport const secondsInMonth = 2592000;\nexport const secondsInDay = 86400;\nexport const secondsInHour = 3600;\nexport const secondsInMin = 60;\nexport const millisecondsInSecond = 1000;\n"
  ],
  "names": [
    "this"
  ],
  "mappings": ";;;;;;;AGAO,IAAP,cAAA,GAAA,OAAA,CAAA;AACA,IAAA,YAAA,GAAA,KAAA,CAAA;AACA,IAAA,aAAA,GAAA,IAAA,CAAA;AACA,IAAA,YAAA,GAA0B,EAA1B,CAA6B;AAC7B,IAAA,oBAA+B,GAA/B,IAAA,CAAA;AACA,IAAA,YAAA,GAAA,CAAAA,IAAA,IAAAA,IAAA,CAAwC,UAAxC,KAAA,UAAA,UAAA,EAAA,MAAA,EAAA,GAAA,EAAA,IAAA,EAAA;;;;;;;;IDLA,OAAA,CAAA,GAAA,CAAA,IAAA,CAAA,IAAA,MAAA,CAAA,cAAA,CAAA,MAAA,EAAA,GAAA,EAAA,CAAA,CAAA,EAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAwCA,aAAA,CAAA,SAAA,CAAA,SAAA,GAAA,UAAA,KAAA,EAAA,IAAA,EAAA;QAEI,IAAJ,IAAA,GAAA,IAAA,IAAA,CAAwB,KAClB,CADN,CAAA;QAMI,IAAI,KAAR,CAAA,IAAA,CAAmB,OAAnB,EAAA,CAA6B,EAA7B;YAEQ,OAAR,KAAoB,CAApB;SAAA;QAAA,IAAA,OAAA,GAAA,IAAA,CAAA,GAAA,CAAA,IAAA,CAAA,KAAA,CAAA,CAAA,IAAA,IAAA,EAAA,CAAA,OAAA,EAAA,GAAA,IAAA,CAAA,OAAA,EAAA,IAAA,oBAAA,CAAA,CAAA,CAAA;QACI,IAAI,QAAQ,GAAhB,IAAA,CAAwB,KAAxB,CAAA,OAAA,GAAA,aAAA,CAAA,CAAA;QAAA,IAA0B,QAA1B,GAAA,CAAA,EAAA;YAAA,OAAA,QAAA,GAAA,QAAA,CAAA;SAEA;QAEI,IAAI,QAAQ,KAAhB,CAAsB,EAAtB;YAAwB,OAAO,QAA/B,GAA0C,OAA1C,CAAA;SAAsD;QAClD,QAAJ,GAAA,IAAA,CAAA,KAAA,CAAA,OAAA,GAAA,cAAA,CAAA,CAAA;QAAA,IAA0B,QAA1B,GAAA,CAAA,EAAA;YAAA,OAAA,QAAA,GAAA,SAAA,CAAA;SAEA;QAEI,IAAI,QAAQ,KAAhB,CAAsB,EAAtB;YAAwB,OAAO,QAA/B,GAA0C,QAAQ,CAAlD;SAAoD;QAChD,QAAJ,GAAA,IAAA,CAAA,KAAA,CAAA,OAAA,GAAA,YAAA,CAAA,CAAA;QAAA,IAA0B,QAA1B,GAAA,CAAA,EAAA;YAAA,OAAA,QAAA,GAAA,OAAA,CAAA;SAEA;QAEI,IAAI,QAAQ,KAAhB,CAAsB,EAAtB;YAAwB,OAAO,QAA/B,GAA0C,MAA1C,CAAA;SAAqD;QACjD,QAAJ,GAAA,IAAA,CAAA,KAAA,CAAA,OAAA,GAAA,aAAA,CAAA,CAAA;QAAA,IAA0B,QAA1B,GAAA,CAAA,EAAA;YAAA,OAAA,QAAA,GAAA,QAAA,CAAA;SAEA;QAEI,IAAI,QAAQ,KAAhB,CAAsB,EAAtB;YAAwB,OAAO,QAA/B,GAA0C,OAA1C,CAAA;SAAuD;QACnD,QAAJ,GAAA,IAAA,CAAA,KAAA,CAAA,OAAA,GAAA,YAAA,CAAA,CAAA;QAAA,IAA0B,QAA1B,GAAA,CAAA,EAAA;YAAA,OAAA,QAAA,GAAA,UAAA,CAAA;SAEA;QACA,IAAA,QAAA,KAAA,CAAA,EAAA;YACA,OAAA,QAAA,GAAA,SAAA,CAAA;SAtDA;QAHK,OAAL,IAAA,CAAA,KAAA,CAAA,OAAA,CAAA,GAAA,GAAA,IAAA,OAAA,KAAA,CAAA,GAAA,QAAA,GAAA,SAAA,CAAA,CAAA;KACA,CAAA;IACA,OAAA,aAAA,CAAA;CACA,EAAa,CAAb,CAAA;;;;;;;;IDrBA,IAAA,OAAA,OAAA,KAAA,QAAA,IAAA,OAAA,OAAA,CAAA,QAAA,KAAA,UAAA;;;;;;;;;;;;;;;;;IDAA,SAAA,eAAA,GAAA;;IAEA,OAAA,eAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;"
}
