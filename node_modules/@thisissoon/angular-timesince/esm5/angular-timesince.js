import { NgModule, Pipe } from '@angular/core';
var secondsInYear = 31536000;
var secondsInMonth = 2592000;
var secondsInDay = 86400;
var secondsInHour = 3600;
var secondsInMin = 60;
var millisecondsInSecond = 1000;
var __decorate$1 = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
/**
 * Based on {@link http://stackoverflow.com/questions/3177836/how-to-format-time-since-xxx-e-g-4-minutes-ago-similar-to-stack-exchange-site}
 * Returns the number of seconds, minutes, days, months or years since
 * any Date object based on the current system time
 *
 * @example
 * ```html
 *  <p>{{ date | timeSince }} ago</p>
 * ```
 *
 * @export
 * @class TimeSincePipe
 * @implements {PipeTransform}
 */
var TimeSincePipe = (function () {
    function TimeSincePipe() {
    }
    /**
     * Attempt to convert the input into a Date object and return the original
     * input if not a valid date. If input is a valid date then calculate the
     * time in seconds from Date Object to 'now'. Then try to divide the number
     * of seconds between now and the date by the number of seconds in a year,
     * month, day, hour or minute
     *
     *
     * @param {*} value
     * @param {*} [args]
     * @returns {*}
     * @memberof TimeSincePipe
     */
    TimeSincePipe.prototype.transform = function (value, args) {
        var date = new Date(value);
        if (isNaN(date.getTime())) {
            return value;
        }
        var seconds = Math.abs(Math.floor((new Date().getTime() - date.getTime()) / millisecondsInSecond));
        var interval = Math.floor(seconds / secondsInYear);
        if (interval > 1) {
            return interval + " years";
        }
        if (interval === 1) {
            return interval + " year";
        }
        interval = Math.floor(seconds / secondsInMonth);
        if (interval > 1) {
            return interval + " months";
        }
        if (interval === 1) {
            return interval + " month";
        }
        interval = Math.floor(seconds / secondsInDay);
        if (interval > 1) {
            return interval + " days";
        }
        if (interval === 1) {
            return interval + " day";
        }
        interval = Math.floor(seconds / secondsInHour);
        if (interval > 1) {
            return interval + " hours";
        }
        if (interval === 1) {
            return interval + " hour";
        }
        interval = Math.floor(seconds / secondsInMin);
        if (interval > 1) {
            return interval + " minutes";
        }
        if (interval === 1) {
            return interval + " minute";
        }
        return Math.floor(seconds) + " " + (seconds === 1 ? 'second' : 'seconds');
    };
    return TimeSincePipe;
}());
TimeSincePipe = __decorate$1([
    Pipe({
        name: 'timeSince'
    })
], TimeSincePipe);
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
/**
 * A simple lightweight library for Angular 2/4+ which returns the
 * number of seconds, minutes, days, months or years since any Date
 * object based on the current system time
 *
 * @export
 * @class TimeSinceModule
 */
var TimeSinceModule = (function () {
    function TimeSinceModule() {
    }
    return TimeSinceModule;
}());
TimeSinceModule = __decorate([
    NgModule({
        declarations: [TimeSincePipe],
        exports: [TimeSincePipe]
    })
], TimeSinceModule);
/**
 * Generated bundle index. Do not edit.
 */
export { TimeSinceModule, TimeSincePipe, millisecondsInSecond, secondsInDay, secondsInHour, secondsInMin, secondsInMonth, secondsInYear };
//# sourceMappingURL=angular-timesince.js.map
