import { Inject, Injectable, InjectionToken, NgModule } from '@angular/core';
import { BrowserXhr, ConnectionBackend, Http, RequestOptions, ResponseOptions, XHRBackend, XSRFStrategy } from '@angular/http';

class AngularHttpFactory {
    /**
     * @param {?} backend
     * @param {?} requestOptions
     * @return {?}
     */
    create(backend, requestOptions) {
        return new Http(backend, requestOptions);
    }
}
AngularHttpFactory.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
AngularHttpFactory.ctorParameters = () => [];

const HTTP_FACTORY = new InjectionToken("Http implementation factory");

class ProgressBrowserXhr {
    /**
     * @param {?} browserXhr
     * @param {?} upload
     * @param {?} download
     */
    constructor(browserXhr, upload, download) {
        this.browserXhr = browserXhr;
        this.upload = upload;
        this.download = download;
    }
    /**
     * @return {?}
     */
    build() {
        const /** @type {?} */ xhr = this.browserXhr.build();
        if (this.upload) {
            xhr.upload.addEventListener("progress", this.createProgressListener(this.upload));
        }
        if (this.download) {
            xhr.addEventListener("progress", this.createProgressListener(this.download));
        }
        return xhr;
    }
    /**
     * @param {?} listener
     * @return {?}
     */
    createProgressListener(listener) {
        return (event) => {
            const /** @type {?} */ progress = {
                event,
                lengthComputable: event.lengthComputable,
                loaded: event.loaded
            };
            if (event.lengthComputable) {
                progress.total = event.total;
                progress.percentage = Math.round((event.loaded * 100 / event.total));
            }
            listener(progress);
        };
    }
}

class ProgressBrowserXhrFactory {
    /**
     * @param {?} browserXhr
     */
    constructor(browserXhr) {
        this.browserXhr = browserXhr;
    }
    /**
     * @param {?} upload
     * @param {?} download
     * @return {?}
     */
    create(upload, download) {
        return new ProgressBrowserXhr(this.browserXhr, upload, download);
    }
}
ProgressBrowserXhrFactory.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
ProgressBrowserXhrFactory.ctorParameters = () => [
    { type: BrowserXhr, },
];

class XHRBackendFactory {
    /**
     * @param {?} responseOptions
     * @param {?} xsrfStrategy
     * @param {?} progressBrowserXhrFactory
     */
    constructor(responseOptions, xsrfStrategy, progressBrowserXhrFactory) {
        this.responseOptions = responseOptions;
        this.xsrfStrategy = xsrfStrategy;
        this.progressBrowserXhrFactory = progressBrowserXhrFactory;
    }
    /**
     * @param {?} upload
     * @param {?} download
     * @return {?}
     */
    create(upload, download) {
        const /** @type {?} */ progressBrowserXhr = this.progressBrowserXhrFactory.create(upload, download);
        return new XHRBackend(progressBrowserXhr, this.responseOptions, this.xsrfStrategy);
    }
}
XHRBackendFactory.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
XHRBackendFactory.ctorParameters = () => [
    { type: ResponseOptions, },
    { type: XSRFStrategy, },
    { type: ProgressBrowserXhrFactory, },
];

class ProgressHttp extends Http {
    /**
     * @param {?} xhrBackendFactory
     * @param {?} requestOptions
     * @param {?} httpFactory
     * @param {?} backend
     */
    constructor(xhrBackendFactory, requestOptions, httpFactory, backend) {
        super(null, requestOptions);
        this.xhrBackendFactory = xhrBackendFactory;
        this.requestOptions = requestOptions;
        this.httpFactory = httpFactory;
        this._uploadCallback = null;
        this._downloadCallback = null;
        this.http = httpFactory.create(backend, requestOptions);
    }
    /**
     * @param {?} url
     * @param {?=} options
     * @return {?}
     */
    request(url, options) {
        return this.http.request(url, options);
    }
    /**
     * @param {?} listener
     * @return {?}
     */
    withDownloadProgressListener(listener) {
        this._downloadCallback = listener;
        return this._buildProgressHttpInstance();
    }
    /**
     * @param {?} listener
     * @return {?}
     */
    withUploadProgressListener(listener) {
        this._uploadCallback = listener;
        return this._buildProgressHttpInstance();
    }
    /**
     * @return {?}
     */
    _buildProgressHttpInstance() {
        const /** @type {?} */ progressHttp = new ProgressHttp(this.xhrBackendFactory, this.requestOptions, this.httpFactory, this._buildXHRBackend());
        progressHttp._uploadCallback = this._uploadCallback;
        progressHttp._downloadCallback = this._downloadCallback;
        return progressHttp;
    }
    /**
     * @return {?}
     */
    _buildXHRBackend() {
        const /** @type {?} */ backend = this.xhrBackendFactory.create(this._uploadCallback, this._downloadCallback);
        return backend;
    }
}
ProgressHttp.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
ProgressHttp.ctorParameters = () => [
    { type: XHRBackendFactory, },
    { type: RequestOptions, },
    { type: undefined, decorators: [{ type: Inject, args: [HTTP_FACTORY,] },] },
    { type: ConnectionBackend, },
];

/**
 * @param {?} xhrBackendFactory
 * @param {?} requestOptions
 * @param {?} httpFactory
 * @return {?}
 */
function progressHttpFactory(xhrBackendFactory, requestOptions, httpFactory) {
    const /** @type {?} */ backend = xhrBackendFactory.create(null, null);
    return new ProgressHttp(xhrBackendFactory, requestOptions, httpFactory, backend);
}
class ProgressHttpModule {
}
ProgressHttpModule.decorators = [
    { type: NgModule, args: [{
                providers: [
                    ProgressBrowserXhrFactory,
                    XHRBackendFactory,
                    AngularHttpFactory,
                    { provide: HTTP_FACTORY, useExisting: AngularHttpFactory },
                    {
                        provide: ProgressHttp,
                        useFactory: progressHttpFactory,
                        deps: [XHRBackendFactory, RequestOptions, HTTP_FACTORY]
                    },
                ]
            },] },
];
/**
 * @nocollapse
 */
ProgressHttpModule.ctorParameters = () => [];

/**
 * Generated bundle index. Do not edit.
 */

export { AngularHttpFactory, HTTP_FACTORY, ProgressHttp, ProgressHttpModule, progressHttpFactory as ɵa, ProgressBrowserXhrFactory as ɵc, XHRBackendFactory as ɵb };
//# sourceMappingURL=angular-progress-http.js.map
