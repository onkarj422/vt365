{"version":3,"file":"angular-progress-http.umd.min.js","sources":["~/angular-progress-http/progress-http.module.ts","~/angular-progress-http/AngularHttpFactory.ts","~/angular-progress-http/http-factory.token.ts","~/angular-progress-http/xhr/ProgressBrowserXhr.ts","~/angular-progress-http/xhr/ProgressBrowserXhrFactory.ts","~/angular-progress-http/xhr/XHRBackendFactory.ts","~/angular-progress-http/progress-http.service.ts"],"sourcesContent":["import {NgModule } from '@angular/core';\nimport { RequestOptions, XHRBackend } from '@angular/http';\n\nimport { HttpFactory } from './interfaces';\nimport { ProgressBrowserXhrFactory } from './xhr/ProgressBrowserXhrFactory';\nimport { XHRBackendFactory } from './xhr/XHRBackendFactory';\nimport { HTTP_FACTORY } from './http-factory.token';\nimport { AngularHttpFactory } from './AngularHttpFactory';\nimport { ProgressHttp } from './progress-http.service';\n/**\n * @param {?} xhrBackendFactory\n * @param {?} requestOptions\n * @param {?} httpFactory\n * @return {?}\n */\nexport function progressHttpFactory(\n    xhrBackendFactory: XHRBackendFactory,\n    requestOptions: RequestOptions,\n    httpFactory: HttpFactory\n): ProgressHttp {\n    const /** @type {?} */ backend = xhrBackendFactory.create(null, null);\n    return new ProgressHttp(xhrBackendFactory, requestOptions, httpFactory, backend);\n}\nexport class ProgressHttpModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    providers: [\n        ProgressBrowserXhrFactory,\n        XHRBackendFactory,\n        AngularHttpFactory,\n        { provide: HTTP_FACTORY, useExisting: AngularHttpFactory },\n        {\n            provide: ProgressHttp,\n            useFactory: progressHttpFactory,\n            deps: [XHRBackendFactory, RequestOptions, HTTP_FACTORY]},\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ProgressHttpModule_tsickle_Closure_declarations() {\n/** @type {?} */\nProgressHttpModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nProgressHttpModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\nimport { Http, RequestOptions, ConnectionBackend} from '@angular/http';\nimport { HttpFactory } from './interfaces';\nexport class AngularHttpFactory implements HttpFactory {\n/**\n * @param {?} backend\n * @param {?} requestOptions\n * @return {?}\n */\npublic create(backend: ConnectionBackend, requestOptions: RequestOptions): Http {\n        return new Http(backend, requestOptions);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction AngularHttpFactory_tsickle_Closure_declarations() {\n/** @type {?} */\nAngularHttpFactory.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAngularHttpFactory.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { InjectionToken } from '@angular/core';\nimport { HttpFactory } from './interfaces';\n\nexport const /** @type {?} */ HTTP_FACTORY = new InjectionToken<HttpFactory>(\"Http implementation factory\");","import {BrowserXhr} from '@angular/http';\n\nimport { Progress } from '../interfaces';\nexport class ProgressBrowserXhr implements BrowserXhr {\n/**\n * @param {?} browserXhr\n * @param {?} upload\n * @param {?} download\n */\npublic constructor(\nprivate browserXhr: BrowserXhr,\nprivate upload:any,\nprivate download:any) {\n    }\n/**\n * @return {?}\n */\npublic build():any {\n        const /** @type {?} */ xhr = this.browserXhr.build();\n\n        if(this.upload) {\n            xhr.upload.addEventListener(\"progress\", this.createProgressListener(this.upload));\n        }\n\n        if(this.download) {\n            xhr.addEventListener(\"progress\", this.createProgressListener(this.download));\n        }\n\n        return xhr;\n    }\n/**\n * @param {?} listener\n * @return {?}\n */\nprivate createProgressListener(listener: (progress:Progress) => void): (event:ProgressEvent) => void {\n        return (event: ProgressEvent) => {\n            const /** @type {?} */ progress: Progress = {\n                event,\n                lengthComputable: event.lengthComputable,\n                loaded: event.loaded\n            };\n\n            if (event.lengthComputable) {\n                progress.total = event.total;\n                progress.percentage = Math.round((event.loaded * 100 / event.total));\n            }\n\n            listener(progress);\n        }\n    }\n}\n\nfunction ProgressBrowserXhr_tsickle_Closure_declarations() {\n/** @type {?} */\nProgressBrowserXhr.prototype.browserXhr;\n/** @type {?} */\nProgressBrowserXhr.prototype.upload;\n/** @type {?} */\nProgressBrowserXhr.prototype.download;\n}\n","import { Injectable } from '@angular/core';\nimport { BrowserXhr } from '@angular/http';\nimport { ProgressBrowserXhr } from './ProgressBrowserXhr';\nimport { Progress } from '../interfaces';\nexport class ProgressBrowserXhrFactory {\n/**\n * @param {?} browserXhr\n */\nconstructor(private browserXhr: BrowserXhr) {}\n/**\n * @param {?} upload\n * @param {?} download\n * @return {?}\n */\npublic create(\n        upload:(progress:Progress) => void,\n        download:(progress:Progress) => void): ProgressBrowserXhr {\n        return new ProgressBrowserXhr(this.browserXhr, upload, download);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: BrowserXhr, },\n];\n}\n\nfunction ProgressBrowserXhrFactory_tsickle_Closure_declarations() {\n/** @type {?} */\nProgressBrowserXhrFactory.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nProgressBrowserXhrFactory.ctorParameters;\n/** @type {?} */\nProgressBrowserXhrFactory.prototype.browserXhr;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\nimport { XHRBackend, ResponseOptions, XSRFStrategy } from '@angular/http';\n\nimport { Progress } from '../interfaces';\nimport { ProgressBrowserXhrFactory } from './ProgressBrowserXhrFactory';\nexport class XHRBackendFactory {\n/**\n * @param {?} responseOptions\n * @param {?} xsrfStrategy\n * @param {?} progressBrowserXhrFactory\n */\nconstructor(\nprivate responseOptions: ResponseOptions,\nprivate xsrfStrategy: XSRFStrategy,\nprivate progressBrowserXhrFactory: ProgressBrowserXhrFactory\n    ) {}\n/**\n * @param {?} upload\n * @param {?} download\n * @return {?}\n */\npublic create(\n        upload:(progress:Progress) => void,\n        download:(progress:Progress) => void): XHRBackend {\n        const /** @type {?} */ progressBrowserXhr = this.progressBrowserXhrFactory.create(upload, download);\n        return new XHRBackend(progressBrowserXhr, this.responseOptions, this.xsrfStrategy);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ResponseOptions, },\n{type: XSRFStrategy, },\n{type: ProgressBrowserXhrFactory, },\n];\n}\n\nfunction XHRBackendFactory_tsickle_Closure_declarations() {\n/** @type {?} */\nXHRBackendFactory.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nXHRBackendFactory.ctorParameters;\n/** @type {?} */\nXHRBackendFactory.prototype.responseOptions;\n/** @type {?} */\nXHRBackendFactory.prototype.xsrfStrategy;\n/** @type {?} */\nXHRBackendFactory.prototype.progressBrowserXhrFactory;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { Http, RequestOptionsArgs, RequestOptions, Request, Response, ConnectionBackend } from '@angular/http';\nimport { Observable } from 'rxjs/Observable';\n\nimport { HttpWithDownloadProgressListener, HttpWithUploadProgressListener, Progress, HttpFactory } from './interfaces';\nimport { XHRBackendFactory } from './xhr/XHRBackendFactory';\nimport { HTTP_FACTORY } from './http-factory.token';\nexport class ProgressHttp extends Http implements HttpWithUploadProgressListener, HttpWithDownloadProgressListener {\nprivate _uploadCallback: (progress: Progress) => void = null;\nprivate _downloadCallback: (progress: Progress) => void = null;\nprivate http: Http;\n/**\n * @param {?} xhrBackendFactory\n * @param {?} requestOptions\n * @param {?} httpFactory\n * @param {?} backend\n */\npublic constructor(\nprivate xhrBackendFactory: XHRBackendFactory,\nprivate requestOptions: RequestOptions,\nprivate httpFactory: HttpFactory,\n        backend: ConnectionBackend\n    ) {\n        super(null, requestOptions);\n        this.http = httpFactory.create(backend, requestOptions);\n    }\n/**\n * @param {?} url\n * @param {?=} options\n * @return {?}\n */\npublic request(url: string | Request, options?: RequestOptionsArgs): Observable<Response> {\n        return this.http.request(url, options);\n    }\n/**\n * @param {?} listener\n * @return {?}\n */\npublic withDownloadProgressListener(\n        listener: (progress: Progress) => void\n    ): HttpWithDownloadProgressListener {\n        this._downloadCallback = listener;\n\n        return this._buildProgressHttpInstance();\n    }\n/**\n * @param {?} listener\n * @return {?}\n */\npublic withUploadProgressListener(\n        listener: (progress: Progress) => void\n    ): HttpWithUploadProgressListener {\n        this._uploadCallback = listener;\n\n        return this._buildProgressHttpInstance();\n    }\n/**\n * @return {?}\n */\nprivate _buildProgressHttpInstance(): ProgressHttp {\n        const /** @type {?} */ progressHttp: ProgressHttp = new ProgressHttp(\n            this.xhrBackendFactory,\n            this.requestOptions,\n            this.httpFactory,\n            this._buildXHRBackend());\n\n        progressHttp._uploadCallback = this._uploadCallback;\n        progressHttp._downloadCallback = this._downloadCallback;\n\n        return progressHttp;\n    }\n/**\n * @return {?}\n */\nprivate _buildXHRBackend(): ConnectionBackend {\n        const /** @type {?} */ backend = this.xhrBackendFactory.create(this._uploadCallback, this._downloadCallback);\n        return backend;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: XHRBackendFactory, },\n{type: RequestOptions, },\n{type: undefined, decorators: [{ type: Inject, args: [HTTP_FACTORY, ] }, ]},\n{type: ConnectionBackend, },\n];\n}\n\nfunction ProgressHttp_tsickle_Closure_declarations() {\n/** @type {?} */\nProgressHttp.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nProgressHttp.ctorParameters;\n/** @type {?} */\nProgressHttp.prototype._uploadCallback;\n/** @type {?} */\nProgressHttp.prototype._downloadCallback;\n/** @type {?} */\nProgressHttp.prototype.http;\n/** @type {?} */\nProgressHttp.prototype.xhrBackendFactory;\n/** @type {?} */\nProgressHttp.prototype.requestOptions;\n/** @type {?} */\nProgressHttp.prototype.httpFactory;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["progressHttpFactory","xhrBackendFactory","requestOptions","httpFactory","backend","create","ProgressHttp","AngularHttpFactory","prototype","Http","decorators","type","Injectable","ctorParameters","HTTP_FACTORY","InjectionToken","ProgressBrowserXhr","browserXhr","upload","download","this","build","xhr","addEventListener","createProgressListener","listener","event","progress","lengthComputable","loaded","total","percentage","Math","round","ProgressBrowserXhrFactory","BrowserXhr","XHRBackendFactory","responseOptions","xsrfStrategy","progressBrowserXhrFactory","progressBrowserXhr","XHRBackend","ResponseOptions","XSRFStrategy","_super","_this","call","_uploadCallback","_downloadCallback","http","__extends","request","url","options","withDownloadProgressListener","_buildProgressHttpInstance","withUploadProgressListener","progressHttp","_buildXHRBackend","RequestOptions","undefined","Inject","args","ConnectionBackend","ProgressHttpModule","NgModule","providers","provide","useExisting","useFactory","deps"],"mappings":"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"}
