{"version":3,"file":"angular-progress-http.es5.js","sources":["ts/angular-progress-http.ts","ts/progress-http.module.ts","ts/progress-http.service.ts","ts/xhr/XHRBackendFactory.ts","ts/xhr/ProgressBrowserXhrFactory.ts","ts/xhr/ProgressBrowserXhr.ts","ts/http-factory.token.ts","ts/AngularHttpFactory.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {HttpWithDownloadProgressListener,HttpWithUploadProgressListener,Progress,HttpFactory,AngularHttpFactory,HTTP_FACTORY,ProgressHttp,ProgressHttpModule} from './public_api';\n\nexport {progressHttpFactory as ɵa} from './progress-http.module';\nexport {ProgressBrowserXhrFactory as ɵc} from './xhr/ProgressBrowserXhrFactory';\nexport {XHRBackendFactory as ɵb} from './xhr/XHRBackendFactory';","import {NgModule } from '@angular/core';\nimport { RequestOptions, XHRBackend } from '@angular/http';\n\nimport { HttpFactory } from './interfaces';\nimport { ProgressBrowserXhrFactory } from './xhr/ProgressBrowserXhrFactory';\nimport { XHRBackendFactory } from './xhr/XHRBackendFactory';\nimport { HTTP_FACTORY } from './http-factory.token';\nimport { AngularHttpFactory } from './AngularHttpFactory';\nimport { ProgressHttp } from './progress-http.service';\n/**\n * @param {?} xhrBackendFactory\n * @param {?} requestOptions\n * @param {?} httpFactory\n * @return {?}\n */\nexport function progressHttpFactory(\n    xhrBackendFactory: XHRBackendFactory,\n    requestOptions: RequestOptions,\n    httpFactory: HttpFactory\n): ProgressHttp {\n    const /** @type {?} */ backend = xhrBackendFactory.create(null, null);\n    return new ProgressHttp(xhrBackendFactory, requestOptions, httpFactory, backend);\n}\nexport class ProgressHttpModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    providers: [\n        ProgressBrowserXhrFactory,\n        XHRBackendFactory,\n        AngularHttpFactory,\n        { provide: HTTP_FACTORY, useExisting: AngularHttpFactory },\n        {\n            provide: ProgressHttp,\n            useFactory: progressHttpFactory,\n            deps: [XHRBackendFactory, RequestOptions, HTTP_FACTORY]},\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ProgressHttpModule_tsickle_Closure_declarations() {\n/** @type {?} */\nProgressHttpModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nProgressHttpModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { Http, RequestOptionsArgs, RequestOptions, Request, Response, ConnectionBackend } from '@angular/http';\nimport { Observable } from 'rxjs/Observable';\n\nimport { HttpWithDownloadProgressListener, HttpWithUploadProgressListener, Progress, HttpFactory } from './interfaces';\nimport { XHRBackendFactory } from './xhr/XHRBackendFactory';\nimport { HTTP_FACTORY } from './http-factory.token';\nexport class ProgressHttp extends Http implements HttpWithUploadProgressListener, HttpWithDownloadProgressListener {\nprivate _uploadCallback: (progress: Progress) => void = null;\nprivate _downloadCallback: (progress: Progress) => void = null;\nprivate http: Http;\n/**\n * @param {?} xhrBackendFactory\n * @param {?} requestOptions\n * @param {?} httpFactory\n * @param {?} backend\n */\npublic constructor(\nprivate xhrBackendFactory: XHRBackendFactory,\nprivate requestOptions: RequestOptions,\nprivate httpFactory: HttpFactory,\n        backend: ConnectionBackend\n    ) {\n        super(null, requestOptions);\n        this.http = httpFactory.create(backend, requestOptions);\n    }\n/**\n * @param {?} url\n * @param {?=} options\n * @return {?}\n */\npublic request(url: string | Request, options?: RequestOptionsArgs): Observable<Response> {\n        return this.http.request(url, options);\n    }\n/**\n * @param {?} listener\n * @return {?}\n */\npublic withDownloadProgressListener(\n        listener: (progress: Progress) => void\n    ): HttpWithDownloadProgressListener {\n        this._downloadCallback = listener;\n\n        return this._buildProgressHttpInstance();\n    }\n/**\n * @param {?} listener\n * @return {?}\n */\npublic withUploadProgressListener(\n        listener: (progress: Progress) => void\n    ): HttpWithUploadProgressListener {\n        this._uploadCallback = listener;\n\n        return this._buildProgressHttpInstance();\n    }\n/**\n * @return {?}\n */\nprivate _buildProgressHttpInstance(): ProgressHttp {\n        const /** @type {?} */ progressHttp: ProgressHttp = new ProgressHttp(\n            this.xhrBackendFactory,\n            this.requestOptions,\n            this.httpFactory,\n            this._buildXHRBackend());\n\n        progressHttp._uploadCallback = this._uploadCallback;\n        progressHttp._downloadCallback = this._downloadCallback;\n\n        return progressHttp;\n    }\n/**\n * @return {?}\n */\nprivate _buildXHRBackend(): ConnectionBackend {\n        const /** @type {?} */ backend = this.xhrBackendFactory.create(this._uploadCallback, this._downloadCallback);\n        return backend;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: XHRBackendFactory, },\n{type: RequestOptions, },\n{type: undefined, decorators: [{ type: Inject, args: [HTTP_FACTORY, ] }, ]},\n{type: ConnectionBackend, },\n];\n}\n\nfunction ProgressHttp_tsickle_Closure_declarations() {\n/** @type {?} */\nProgressHttp.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nProgressHttp.ctorParameters;\n/** @type {?} */\nProgressHttp.prototype._uploadCallback;\n/** @type {?} */\nProgressHttp.prototype._downloadCallback;\n/** @type {?} */\nProgressHttp.prototype.http;\n/** @type {?} */\nProgressHttp.prototype.xhrBackendFactory;\n/** @type {?} */\nProgressHttp.prototype.requestOptions;\n/** @type {?} */\nProgressHttp.prototype.httpFactory;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\nimport { XHRBackend, ResponseOptions, XSRFStrategy } from '@angular/http';\n\nimport { Progress } from '../interfaces';\nimport { ProgressBrowserXhrFactory } from './ProgressBrowserXhrFactory';\nexport class XHRBackendFactory {\n/**\n * @param {?} responseOptions\n * @param {?} xsrfStrategy\n * @param {?} progressBrowserXhrFactory\n */\nconstructor(\nprivate responseOptions: ResponseOptions,\nprivate xsrfStrategy: XSRFStrategy,\nprivate progressBrowserXhrFactory: ProgressBrowserXhrFactory\n    ) {}\n/**\n * @param {?} upload\n * @param {?} download\n * @return {?}\n */\npublic create(\n        upload:(progress:Progress) => void,\n        download:(progress:Progress) => void): XHRBackend {\n        const /** @type {?} */ progressBrowserXhr = this.progressBrowserXhrFactory.create(upload, download);\n        return new XHRBackend(progressBrowserXhr, this.responseOptions, this.xsrfStrategy);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ResponseOptions, },\n{type: XSRFStrategy, },\n{type: ProgressBrowserXhrFactory, },\n];\n}\n\nfunction XHRBackendFactory_tsickle_Closure_declarations() {\n/** @type {?} */\nXHRBackendFactory.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nXHRBackendFactory.ctorParameters;\n/** @type {?} */\nXHRBackendFactory.prototype.responseOptions;\n/** @type {?} */\nXHRBackendFactory.prototype.xsrfStrategy;\n/** @type {?} */\nXHRBackendFactory.prototype.progressBrowserXhrFactory;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\nimport { BrowserXhr } from '@angular/http';\nimport { ProgressBrowserXhr } from './ProgressBrowserXhr';\nimport { Progress } from '../interfaces';\nexport class ProgressBrowserXhrFactory {\n/**\n * @param {?} browserXhr\n */\nconstructor(private browserXhr: BrowserXhr) {}\n/**\n * @param {?} upload\n * @param {?} download\n * @return {?}\n */\npublic create(\n        upload:(progress:Progress) => void,\n        download:(progress:Progress) => void): ProgressBrowserXhr {\n        return new ProgressBrowserXhr(this.browserXhr, upload, download);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: BrowserXhr, },\n];\n}\n\nfunction ProgressBrowserXhrFactory_tsickle_Closure_declarations() {\n/** @type {?} */\nProgressBrowserXhrFactory.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nProgressBrowserXhrFactory.ctorParameters;\n/** @type {?} */\nProgressBrowserXhrFactory.prototype.browserXhr;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {BrowserXhr} from '@angular/http';\n\nimport { Progress } from '../interfaces';\nexport class ProgressBrowserXhr implements BrowserXhr {\n/**\n * @param {?} browserXhr\n * @param {?} upload\n * @param {?} download\n */\npublic constructor(\nprivate browserXhr: BrowserXhr,\nprivate upload:any,\nprivate download:any) {\n    }\n/**\n * @return {?}\n */\npublic build():any {\n        const /** @type {?} */ xhr = this.browserXhr.build();\n\n        if(this.upload) {\n            xhr.upload.addEventListener(\"progress\", this.createProgressListener(this.upload));\n        }\n\n        if(this.download) {\n            xhr.addEventListener(\"progress\", this.createProgressListener(this.download));\n        }\n\n        return xhr;\n    }\n/**\n * @param {?} listener\n * @return {?}\n */\nprivate createProgressListener(listener: (progress:Progress) => void): (event:ProgressEvent) => void {\n        return (event: ProgressEvent) => {\n            const /** @type {?} */ progress: Progress = {\n                event,\n                lengthComputable: event.lengthComputable,\n                loaded: event.loaded\n            };\n\n            if (event.lengthComputable) {\n                progress.total = event.total;\n                progress.percentage = Math.round((event.loaded * 100 / event.total));\n            }\n\n            listener(progress);\n        }\n    }\n}\n\nfunction ProgressBrowserXhr_tsickle_Closure_declarations() {\n/** @type {?} */\nProgressBrowserXhr.prototype.browserXhr;\n/** @type {?} */\nProgressBrowserXhr.prototype.upload;\n/** @type {?} */\nProgressBrowserXhr.prototype.download;\n}\n","import { InjectionToken } from '@angular/core';\nimport { HttpFactory } from './interfaces';\n\nexport const /** @type {?} */ HTTP_FACTORY = new InjectionToken<HttpFactory>(\"Http implementation factory\");","import { Injectable } from '@angular/core';\nimport { Http, RequestOptions, ConnectionBackend} from '@angular/http';\nimport { HttpFactory } from './interfaces';\nexport class AngularHttpFactory implements HttpFactory {\n/**\n * @param {?} backend\n * @param {?} requestOptions\n * @return {?}\n */\npublic create(backend: ConnectionBackend, requestOptions: RequestOptions): Http {\n        return new Http(backend, requestOptions);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction AngularHttpFactory_tsickle_Closure_declarations() {\n/** @type {?} */\nAngularHttpFactory.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAngularHttpFactory.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":[],"mappings":"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"}
