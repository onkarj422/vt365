var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { Inject, Injectable, InjectionToken, NgModule } from '@angular/core';
import { BrowserXhr, ConnectionBackend, Http, RequestOptions, ResponseOptions, XHRBackend, XSRFStrategy } from '@angular/http';
var AngularHttpFactory = (function () {
    function AngularHttpFactory() {
    }
    /**
     * @param {?} backend
     * @param {?} requestOptions
     * @return {?}
     */
    AngularHttpFactory.prototype.create = function (backend, requestOptions) {
        return new Http(backend, requestOptions);
    };
    return AngularHttpFactory;
}());
AngularHttpFactory.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
AngularHttpFactory.ctorParameters = function () { return []; };
var HTTP_FACTORY = new InjectionToken("Http implementation factory");
var ProgressBrowserXhr = (function () {
    /**
     * @param {?} browserXhr
     * @param {?} upload
     * @param {?} download
     */
    function ProgressBrowserXhr(browserXhr, upload, download) {
        this.browserXhr = browserXhr;
        this.upload = upload;
        this.download = download;
    }
    /**
     * @return {?}
     */
    ProgressBrowserXhr.prototype.build = function () {
        var /** @type {?} */ xhr = this.browserXhr.build();
        if (this.upload) {
            xhr.upload.addEventListener("progress", this.createProgressListener(this.upload));
        }
        if (this.download) {
            xhr.addEventListener("progress", this.createProgressListener(this.download));
        }
        return xhr;
    };
    /**
     * @param {?} listener
     * @return {?}
     */
    ProgressBrowserXhr.prototype.createProgressListener = function (listener) {
        return function (event) {
            var /** @type {?} */ progress = {
                event: event,
                lengthComputable: event.lengthComputable,
                loaded: event.loaded
            };
            if (event.lengthComputable) {
                progress.total = event.total;
                progress.percentage = Math.round((event.loaded * 100 / event.total));
            }
            listener(progress);
        };
    };
    return ProgressBrowserXhr;
}());
var ProgressBrowserXhrFactory = (function () {
    /**
     * @param {?} browserXhr
     */
    function ProgressBrowserXhrFactory(browserXhr) {
        this.browserXhr = browserXhr;
    }
    /**
     * @param {?} upload
     * @param {?} download
     * @return {?}
     */
    ProgressBrowserXhrFactory.prototype.create = function (upload, download) {
        return new ProgressBrowserXhr(this.browserXhr, upload, download);
    };
    return ProgressBrowserXhrFactory;
}());
ProgressBrowserXhrFactory.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
ProgressBrowserXhrFactory.ctorParameters = function () { return [
    { type: BrowserXhr, },
]; };
var XHRBackendFactory = (function () {
    /**
     * @param {?} responseOptions
     * @param {?} xsrfStrategy
     * @param {?} progressBrowserXhrFactory
     */
    function XHRBackendFactory(responseOptions, xsrfStrategy, progressBrowserXhrFactory) {
        this.responseOptions = responseOptions;
        this.xsrfStrategy = xsrfStrategy;
        this.progressBrowserXhrFactory = progressBrowserXhrFactory;
    }
    /**
     * @param {?} upload
     * @param {?} download
     * @return {?}
     */
    XHRBackendFactory.prototype.create = function (upload, download) {
        var /** @type {?} */ progressBrowserXhr = this.progressBrowserXhrFactory.create(upload, download);
        return new XHRBackend(progressBrowserXhr, this.responseOptions, this.xsrfStrategy);
    };
    return XHRBackendFactory;
}());
XHRBackendFactory.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
XHRBackendFactory.ctorParameters = function () { return [
    { type: ResponseOptions, },
    { type: XSRFStrategy, },
    { type: ProgressBrowserXhrFactory, },
]; };
var ProgressHttp = (function (_super) {
    __extends(ProgressHttp, _super);
    /**
     * @param {?} xhrBackendFactory
     * @param {?} requestOptions
     * @param {?} httpFactory
     * @param {?} backend
     */
    function ProgressHttp(xhrBackendFactory, requestOptions, httpFactory, backend) {
        var _this = _super.call(this, null, requestOptions) || this;
        _this.xhrBackendFactory = xhrBackendFactory;
        _this.requestOptions = requestOptions;
        _this.httpFactory = httpFactory;
        _this._uploadCallback = null;
        _this._downloadCallback = null;
        _this.http = httpFactory.create(backend, requestOptions);
        return _this;
    }
    /**
     * @param {?} url
     * @param {?=} options
     * @return {?}
     */
    ProgressHttp.prototype.request = function (url, options) {
        return this.http.request(url, options);
    };
    /**
     * @param {?} listener
     * @return {?}
     */
    ProgressHttp.prototype.withDownloadProgressListener = function (listener) {
        this._downloadCallback = listener;
        return this._buildProgressHttpInstance();
    };
    /**
     * @param {?} listener
     * @return {?}
     */
    ProgressHttp.prototype.withUploadProgressListener = function (listener) {
        this._uploadCallback = listener;
        return this._buildProgressHttpInstance();
    };
    /**
     * @return {?}
     */
    ProgressHttp.prototype._buildProgressHttpInstance = function () {
        var /** @type {?} */ progressHttp = new ProgressHttp(this.xhrBackendFactory, this.requestOptions, this.httpFactory, this._buildXHRBackend());
        progressHttp._uploadCallback = this._uploadCallback;
        progressHttp._downloadCallback = this._downloadCallback;
        return progressHttp;
    };
    /**
     * @return {?}
     */
    ProgressHttp.prototype._buildXHRBackend = function () {
        var /** @type {?} */ backend = this.xhrBackendFactory.create(this._uploadCallback, this._downloadCallback);
        return backend;
    };
    return ProgressHttp;
}(Http));
ProgressHttp.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
ProgressHttp.ctorParameters = function () { return [
    { type: XHRBackendFactory, },
    { type: RequestOptions, },
    { type: undefined, decorators: [{ type: Inject, args: [HTTP_FACTORY,] },] },
    { type: ConnectionBackend, },
]; };
/**
 * @param {?} xhrBackendFactory
 * @param {?} requestOptions
 * @param {?} httpFactory
 * @return {?}
 */
function progressHttpFactory(xhrBackendFactory, requestOptions, httpFactory) {
    var /** @type {?} */ backend = xhrBackendFactory.create(null, null);
    return new ProgressHttp(xhrBackendFactory, requestOptions, httpFactory, backend);
}
var ProgressHttpModule = (function () {
    function ProgressHttpModule() {
    }
    return ProgressHttpModule;
}());
ProgressHttpModule.decorators = [
    { type: NgModule, args: [{
                providers: [
                    ProgressBrowserXhrFactory,
                    XHRBackendFactory,
                    AngularHttpFactory,
                    { provide: HTTP_FACTORY, useExisting: AngularHttpFactory },
                    {
                        provide: ProgressHttp,
                        useFactory: progressHttpFactory,
                        deps: [XHRBackendFactory, RequestOptions, HTTP_FACTORY]
                    },
                ]
            },] },
];
/**
 * @nocollapse
 */
ProgressHttpModule.ctorParameters = function () { return []; };
/**
 * Generated bundle index. Do not edit.
 */
export { AngularHttpFactory, HTTP_FACTORY, ProgressHttp, ProgressHttpModule, progressHttpFactory as ɵa, ProgressBrowserXhrFactory as ɵc, XHRBackendFactory as ɵb };
//# sourceMappingURL=angular-progress-http.es5.js.map
