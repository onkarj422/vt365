{"version":3,"file":"queryParser.js","sourceRoot":"","sources":["../../lib/queryParser.ts"],"names":[],"mappings":"AAAA,IAAA;IACE,qBAAoB,WAAgB;QAAhB,gBAAW,GAAX,WAAW,CAAK;KAAI;IAEjC,gCAAU,GAAjB,UAAkB,KAAa;QAA/B,iBAIC;QAHC,IAAM,OAAO,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAEjC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,EAA5B,CAA4B,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;KACrE;IAEM,sCAAgB,GAAvB,UAAwB,KAAa;QACnC,IAAM,aAAa,GAAG,EAAE,CAAC;QACzB,IAAM,OAAO,GAAG,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QAErC,IAAI,aAAa,GAAG,EAAE,CAAC;QACvB,GAAG,CAAC,CAAc,UAAO,EAAP,mBAAO,EAAP,qBAAO,EAAP,IAAO;YAApB,IAAI,KAAK,gBAAA;YACZ,KAAK,GAAG,KAAK,CAAC,IAAI,EAAE,CAAC;YACrB,IAAM,UAAU,GAAG,KAAK,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC;YACpC,IAAM,iBAAiB,GAAG,KAAK,CAAC,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;YACzD,IAAI,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC;;YAGrD,EAAE,CAAC,CAAC,UAAU,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;gBAClC,UAAU,GAAG;oBACX,KAAK,EAAE,OAAO;oBACd,KAAK,EAAE,iBAAiB;iBACzB,CAAC;aACH;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;gBACvB,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAC1B,QAAQ,CAAC;aACV;YAED,EAAE,CAAC,CAAC,OAAO,UAAU,KAAK,QAAQ,CAAC,CAAC,CAAC;gBACnC,aAAa,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;gBAC/B,QAAQ,CAAC;aACV;YAED,IAAM,KAAK,GAAG,UAAU,CAAC,KAAK,CAAC;YAE/B,EAAE,CAAC,CAAC,CAAC,aAAa,IAAI,KAAK,CAAC,CAAC,CAAC;gBAC5B,aAAa,GAAG,KAAK,CAAC;aACvB;YAED,EAAE,CAAC,CAAC,KAAK,IAAI,KAAK,KAAK,aAAa,CAAC,CAAC,CAAC;gBACrC,MAAM,IAAI,KAAK,CAAC,+DAA6D,UAAY,CAAC,CAAC;aAC5F;YAEM,IAAA,wBAAK,EAAE,wBAAK,CAAgB;YACnC,IAAI,QAAQ,GAAG,KAAK,CAAC;YACrB,IAAI,KAAK,GAAG,EAAE,CAAC;YAEf,IAAI,YAAY,SAAA,CAAC;YACjB,EAAE,CAAC,CAAC,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC;gBAC9B,IAAM,KAAK,GAAG,UAAU,CAAC,KAAK,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;gBAClD,IAAM,SAAS,GAAG,CAAC,KAAK,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,MAAM,CAAC;gBACzD,IAAM,MAAM,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC;gBACzC,QAAQ,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC;gBAC9B,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;gBAE/B,EAAE,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;oBACzB,YAAY,GAAG,CAAC,GAAG,CAAC,SAAA,EAAE,EAAI,CAAC,SAAS,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAA,CAAC,CAAC;iBAClE;aACF;YAED,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;gBACf,YAAY,GAAG,CAAC,CAAC;aAClB;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC;gBAChC,YAAY,GAAG,UAAU,CAAC,SAAS,CAAC;aACrC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,KAAK,IAAI,CAAC,CAAC,CAAC;gBAC1B,YAAY,GAAG,CAAC,CAAC;aAClB;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;gBACzB,YAAY,GAAG,GAAG,CAAC;aACpB;;YAGD,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACV,MAAM,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBACjB,KAAK,GAAG;wBACN,KAAK,GAAG,UAAQ,UAAU,CAAC,KAAK,WAAK,QAAQ,GAAG,YAAY,IAAG,KAAK,MAAG,CAAC;wBACxE,KAAK,CAAC;oBACR,KAAK,GAAG;wBACN,KAAK,GAAG,UAAQ,UAAU,CAAC,KAAK,WAAK,QAAQ,GAAG,YAAY,IAAG,KAAK,MAAG,CAAC;wBACxE,KAAK,CAAC;oBACR;wBACE,KAAK,GAAG,MAAI,UAAU,CAAC,KAAK,UAAK,KAAK,MAAG,CAAC;wBAC1C,KAAK,CAAC;iBACT;aACF;YAAC,IAAI,CAAC,CAAC;gBACN,KAAK,GAAG,EAAE,CAAC;aACZ;YAED,IAAM,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC;YACjC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;gBACX,KAAK,GAAG,KAAK,GAAM,KAAK,aAAQ,MAAQ,GAAG,MAAM,CAAC;aACnD;YAED,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACV,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aAC3B;SACF;QAED,IAAM,MAAM,GAAG,aAAa,GAAG,aAAa,GAAG,OAAO,GAAG,EAAE,CAAC;QAC5D,MAAM,CAAC,MAAM,GAAG,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;KAC7C;sBAtGH;IAuGC,CAAA;AAvGD,uBAuGC","sourcesContent":["export class QueryParser {\n  constructor(private breakpoints: any) {}\n\n  public parseQuery(input: string) {\n    const queries = input.split(',');\n\n    return queries.map(query => this.parseSingleQuery(query)).join(',');\n  }\n\n  public parseSingleQuery(input: string): string {\n    const resultQueries = [];\n    const queries = input.split(' and ');\n\n    let possibleMedia = '';\n    for (let query of queries) {\n      query = query.trim();\n      const canBeEqual = query[1] === '=';\n      const withoutComparison = query.replace(/^(<|>)?=?/, '');\n      let breakpoint = this.breakpoints[withoutComparison];\n\n      // If no breakpoint was found, treat as exact media query unless it can be interpreted as a number, e.g. '<980px'\n      if (parseFloat(withoutComparison)) {\n        breakpoint = {\n          param: 'width',\n          value: withoutComparison\n        };\n      } else if (!breakpoint) {\n        resultQueries.push(query);\n        continue;\n      }\n\n      if (typeof breakpoint === 'string') {\n        resultQueries.push(breakpoint);\n        continue;\n      }\n\n      const media = breakpoint.media;\n\n      if (!possibleMedia && media) {\n        possibleMedia = media;\n      }\n\n      if (media && media !== possibleMedia) {\n        throw new Error(`Clash of media property used for different breakpoints in ${breakpoint}`);\n      }\n\n      const {value, param } = breakpoint;\n      let numValue = value;\n      let units = '';\n\n      let precisionVal;\n      if (typeof value === 'string') {\n        const match = breakpoint.value.match(/[a-zA-Z]+/);\n        const unitIndex = (match && match.index) || value.length;\n        const number = value.slice(0, unitIndex);\n        numValue = parseFloat(number);\n        units = value.slice(unitIndex);\n\n        if (number.includes('.')) {\n          precisionVal = 1 / (10 ** (unitIndex - number.indexOf('.') - 1));\n        }\n      }\n\n      if (canBeEqual) {\n        precisionVal = 0;\n      } else if (breakpoint.precision) {\n        precisionVal = breakpoint.precision;\n      } else if (units === 'px') {\n        precisionVal = 1;\n      } else if (!precisionVal) {\n        precisionVal = 0.1;\n      }\n\n      // Can also use no value, e.g. { media: 'screen' }\n      if (value) {\n        switch (query[0]) {\n          case '<':\n            query = `(max-${breakpoint.param}: ${numValue - precisionVal}${units})`;\n            break;\n          case '>':\n            query = `(min-${breakpoint.param}: ${numValue + precisionVal}${units})`;\n            break;\n          default:\n            query = `(${breakpoint.param}: ${value})`;\n            break;\n        }\n      } else {\n        query = '';\n      }\n\n      const suffix = breakpoint.suffix;\n      if (suffix) {\n        query = query ? `${query} and ${suffix}` : suffix;\n      }\n\n      if (query) {\n        resultQueries.push(query);\n      }\n    }\n\n    const prefix = possibleMedia ? possibleMedia + ' and ' : '';\n    return prefix + resultQueries.join(' and ');\n  }\n}\n"]}