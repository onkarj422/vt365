{"version":3,"file":"if-media.service.js","sourceRoot":"","sources":["../../lib/if-media.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Inject, Injectable } from '@angular/core';\nimport { CONFIG } from './if-media.config';\nimport { QueryParser } from './queryParser';\n\nclass ReflectionContainer {\n  constructor(private service: any, public component: any) {}\n\n  public when(query: any, matchFn: any) {\n    this.createReflection(query, matchFn, true);\n  }\n\n  public onChange(query: any, matchFn: any) {\n    this.createReflection(query, matchFn, false);\n  }\n\n  private createReflection(query: any, matchFn: any, onlyWhenMatched: boolean) {\n    if (typeof query === 'string') {\n      this.singleReflection(query, matchFn, onlyWhenMatched);\n    } else if (typeof query === 'object') {\n      this.objectReflection(query, onlyWhenMatched);\n    } else {\n      throw new Error('Unsupported breakpoint parameter, please use a string or an object with breakpoints as keys.');\n    }\n  }\n\n  private objectReflection(queryObj: any, onlyWhenMatched = false) {\n    this.service.addObjectReflection(this, queryObj, onlyWhenMatched);\n  }\n\n  private singleReflection(query: any, matchLogic: any, onlyWhenMatched = false) {\n    if (typeof matchLogic === 'function') {\n      this.service.addSingleReflection(this, { query, matchFn: matchLogic, onlyWhenMatched });\n    } else if (typeof matchLogic === 'object') {\n      this.service.addSingleReflection(this, { query, newState: matchLogic, onlyWhenMatched });\n    }\n  }\n\n  public deregister() {\n    this.service.removeReflection(this);\n  }\n}\n\n@Injectable()\nexport class IfMediaService {\n  private elements = new Map();\n  private reflections = new Map();\n  private throttle = 100;\n  private isThrottling = false;\n  private resized = false;\n  private notifyTimeout: any;\n  private parser: QueryParser;\n\n  constructor(@Inject(CONFIG) config: any) {\n    this.throttle = config.throttle;\n    this.parser = new QueryParser(config.breakpoints);\n    if (typeof window !== 'undefined') {\n      window.addEventListener('resize', this.onResize.bind(this));\n    }\n  }\n\n  public register(component: any): {\n    when: Function;\n    onChange: Function;\n    deregister: Function;\n  } {\n    return new ReflectionContainer({\n      addSingleReflection: this.addSingleReflection.bind(this),\n      addObjectReflection: this.addObjectReflection.bind(this),\n      removeReflection: this.removeReflection.bind(this)\n    }, component);\n  }\n\n  public isMedia(query: any): boolean {\n    if (typeof window === 'undefined') {\n      return false;\n    }\n\n    const mediaQuery = this.parser.parseQuery(query);\n    return window.matchMedia(mediaQuery).matches;\n  }\n\n  private sendNotifications() {\n    this.resolveReflections();\n    this.notifyElements();\n  }\n\n  private throttledNotify() {\n    if (this.resized) {\n      this.sendNotifications();\n\n      this.notifyTimeout = setTimeout(() => {\n        this.throttledNotify();\n      }, this.throttle);\n    } else {\n      clearTimeout(this.notifyTimeout);\n      this.isThrottling = false;\n    }\n\n    this.resized = false;\n  }\n\n  private onResize() {\n    this.resized = true;\n    if (!this.isThrottling) {\n      this.sendNotifications();\n      this.isThrottling = true;\n      setTimeout(() => this.throttledNotify(), this.throttle);\n    }\n  }\n\n  private addSingleReflection(container: any, { query = '', matchFn = (m: boolean) => {}, onlyWhenMatched = false, newState = null }) {\n    const arr = this.reflections.get(container) || [];\n    const matches = this.isMedia(query);\n    this.reflections.set(container, arr.concat({query, matchFn, matches, onlyWhenMatched, newState}));\n\n    const firstLoad = !onlyWhenMatched || matches;\n    if (typeof matchFn === 'function' && firstLoad) {\n      matchFn(matches);\n    }\n    if (newState && firstLoad) {\n      this.mergeNewState(container.component, newState);\n    }\n  }\n\n  private addObjectReflection(container: any, queryObj: any, onlyWhenMatched = false) {\n    for (const query of Object.keys(queryObj)) {\n      const matchLogic = queryObj[query];\n      if (typeof matchLogic === 'function') {\n        this.addSingleReflection(container, { query, matchFn: matchLogic, onlyWhenMatched } );\n      } else if (typeof matchLogic === 'object') {\n        this.addSingleReflection(container, { query, newState: matchLogic, onlyWhenMatched });\n      }\n    }\n  }\n\n  private mergeNewState(component: any, newState: any) {\n    for (const property of Object.keys(newState)) {\n      component[property] = newState[property];\n    }\n  }\n\n  private removeReflection(container: any) {\n    this.reflections.delete(container);\n  }\n\n  private resolveReflections() {\n    this.reflections.forEach((val, container) => {\n      const newVal = [];\n\n      for (const { query, matchFn, matches: oldMatch, onlyWhenMatched, newState } of val) {\n        const newMatch = this.isMedia(query);\n        // Don't do anything if the flag didn't change\n        if (newMatch === oldMatch) {\n          newVal.push({ query, matchFn, matches: newMatch, onlyWhenMatched, newState });\n          continue;\n        }\n\n        let resolve = false;\n        if (onlyWhenMatched && !oldMatch) {\n          resolve = true;\n        } else if (!onlyWhenMatched) {\n          resolve = true;\n        }\n\n        if (resolve) {\n          if (newState) {\n            this.mergeNewState(container.component, newState);\n          } else if (matchFn) {\n            matchFn(newMatch);\n          }\n        }\n\n        newVal.push({ query, matchFn, matches: newMatch, onlyWhenMatched, newState });\n      }\n\n      this.reflections.set(container, newVal);\n    });\n  }\n\n  public registerElement(element: any, query: string) {\n    this.elements.set(element, query);\n    if (this.isMedia(query)) {\n      element.show();\n    } else {\n      element.hide();\n    }\n  }\n\n  public deregisterElement(element: any) {\n    this.elements.delete(element);\n  }\n\n  private notifyElements() {\n    this.elements.forEach((query, el) => {\n      if (this.isMedia(query)) {\n        el.show();\n      } else {\n        el.hide();\n      }\n    });\n  }\n\n}\n"]}