import { Inject, Injectable } from '@angular/core';
import { CONFIG } from './if-media.config';
import { QueryParser } from './queryParser';
var ReflectionContainer = (function () {
    function ReflectionContainer(service, component) {
        this.service = service;
        this.component = component;
    }
    ReflectionContainer.prototype.when = function (query, matchFn) {
        this.createReflection(query, matchFn, true);
    };
    ReflectionContainer.prototype.onChange = function (query, matchFn) {
        this.createReflection(query, matchFn, false);
    };
    ReflectionContainer.prototype.createReflection = function (query, matchFn, onlyWhenMatched) {
        if (typeof query === 'string') {
            this.singleReflection(query, matchFn, onlyWhenMatched);
        }
        else if (typeof query === 'object') {
            this.objectReflection(query, onlyWhenMatched);
        }
        else {
            throw new Error('Unsupported breakpoint parameter, please use a string or an object with breakpoints as keys.');
        }
    };
    ReflectionContainer.prototype.objectReflection = function (queryObj, onlyWhenMatched) {
        if (onlyWhenMatched === void 0) { onlyWhenMatched = false; }
        this.service.addObjectReflection(this, queryObj, onlyWhenMatched);
    };
    ReflectionContainer.prototype.singleReflection = function (query, matchLogic, onlyWhenMatched) {
        if (onlyWhenMatched === void 0) { onlyWhenMatched = false; }
        if (typeof matchLogic === 'function') {
            this.service.addSingleReflection(this, { query: query, matchFn: matchLogic, onlyWhenMatched: onlyWhenMatched });
        }
        else if (typeof matchLogic === 'object') {
            this.service.addSingleReflection(this, { query: query, newState: matchLogic, onlyWhenMatched: onlyWhenMatched });
        }
    };
    ReflectionContainer.prototype.deregister = function () {
        this.service.removeReflection(this);
    };
    return ReflectionContainer;
}());
var IfMediaService = (function () {
    function IfMediaService(config) {
        this.elements = new Map();
        this.reflections = new Map();
        this.throttle = 100;
        this.isThrottling = false;
        this.resized = false;
        this.throttle = config.throttle;
        this.parser = new QueryParser(config.breakpoints);
        if (typeof window !== 'undefined') {
            window.addEventListener('resize', this.onResize.bind(this));
        }
    }
    IfMediaService.prototype.register = function (component) {
        return new ReflectionContainer({
            addSingleReflection: this.addSingleReflection.bind(this),
            addObjectReflection: this.addObjectReflection.bind(this),
            removeReflection: this.removeReflection.bind(this)
        }, component);
    };
    IfMediaService.prototype.isMedia = function (query) {
        if (typeof window === 'undefined') {
            return false;
        }
        var mediaQuery = this.parser.parseQuery(query);
        return window.matchMedia(mediaQuery).matches;
    };
    IfMediaService.prototype.sendNotifications = function () {
        this.resolveReflections();
        this.notifyElements();
    };
    IfMediaService.prototype.throttledNotify = function () {
        var _this = this;
        if (this.resized) {
            this.sendNotifications();
            this.notifyTimeout = setTimeout(function () {
                _this.throttledNotify();
            }, this.throttle);
        }
        else {
            clearTimeout(this.notifyTimeout);
            this.isThrottling = false;
        }
        this.resized = false;
    };
    IfMediaService.prototype.onResize = function () {
        var _this = this;
        this.resized = true;
        if (!this.isThrottling) {
            this.sendNotifications();
            this.isThrottling = true;
            setTimeout(function () { return _this.throttledNotify(); }, this.throttle);
        }
    };
    IfMediaService.prototype.addSingleReflection = function (container, _a) {
        var _b = _a.query, query = _b === void 0 ? '' : _b, _c = _a.matchFn, matchFn = _c === void 0 ? function (m) { } : _c, _d = _a.onlyWhenMatched, onlyWhenMatched = _d === void 0 ? false : _d, _e = _a.newState, newState = _e === void 0 ? null : _e;
        var arr = this.reflections.get(container) || [];
        var matches = this.isMedia(query);
        this.reflections.set(container, arr.concat({ query: query, matchFn: matchFn, matches: matches, onlyWhenMatched: onlyWhenMatched, newState: newState }));
        var firstLoad = !onlyWhenMatched || matches;
        if (typeof matchFn === 'function' && firstLoad) {
            matchFn(matches);
        }
        if (newState && firstLoad) {
            this.mergeNewState(container.component, newState);
        }
    };
    IfMediaService.prototype.addObjectReflection = function (container, queryObj, onlyWhenMatched) {
        if (onlyWhenMatched === void 0) { onlyWhenMatched = false; }
        for (var _i = 0, _a = Object.keys(queryObj); _i < _a.length; _i++) {
            var query = _a[_i];
            var matchLogic = queryObj[query];
            if (typeof matchLogic === 'function') {
                this.addSingleReflection(container, { query: query, matchFn: matchLogic, onlyWhenMatched: onlyWhenMatched });
            }
            else if (typeof matchLogic === 'object') {
                this.addSingleReflection(container, { query: query, newState: matchLogic, onlyWhenMatched: onlyWhenMatched });
            }
        }
    };
    IfMediaService.prototype.mergeNewState = function (component, newState) {
        for (var _i = 0, _a = Object.keys(newState); _i < _a.length; _i++) {
            var property = _a[_i];
            component[property] = newState[property];
        }
    };
    IfMediaService.prototype.removeReflection = function (container) {
        this.reflections.delete(container);
    };
    IfMediaService.prototype.resolveReflections = function () {
        var _this = this;
        this.reflections.forEach(function (val, container) {
            var newVal = [];
            for (var _i = 0, val_1 = val; _i < val_1.length; _i++) {
                var _a = val_1[_i], query = _a.query, matchFn = _a.matchFn, oldMatch = _a.matches, onlyWhenMatched = _a.onlyWhenMatched, newState = _a.newState;
                var newMatch = _this.isMedia(query);
                // Don't do anything if the flag didn't change
                if (newMatch === oldMatch) {
                    newVal.push({ query: query, matchFn: matchFn, matches: newMatch, onlyWhenMatched: onlyWhenMatched, newState: newState });
                    continue;
                }
                var resolve = false;
                if (onlyWhenMatched && !oldMatch) {
                    resolve = true;
                }
                else if (!onlyWhenMatched) {
                    resolve = true;
                }
                if (resolve) {
                    if (newState) {
                        _this.mergeNewState(container.component, newState);
                    }
                    else if (matchFn) {
                        matchFn(newMatch);
                    }
                }
                newVal.push({ query: query, matchFn: matchFn, matches: newMatch, onlyWhenMatched: onlyWhenMatched, newState: newState });
            }
            _this.reflections.set(container, newVal);
        });
    };
    IfMediaService.prototype.registerElement = function (element, query) {
        this.elements.set(element, query);
        if (this.isMedia(query)) {
            element.show();
        }
        else {
            element.hide();
        }
    };
    IfMediaService.prototype.deregisterElement = function (element) {
        this.elements.delete(element);
    };
    IfMediaService.prototype.notifyElements = function () {
        var _this = this;
        this.elements.forEach(function (query, el) {
            if (_this.isMedia(query)) {
                el.show();
            }
            else {
                el.hide();
            }
        });
    };
    IfMediaService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    IfMediaService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [CONFIG,] },] },
    ]; };
    return IfMediaService;
}());
export { IfMediaService };
//# sourceMappingURL=if-media.service.js.map