{"version":3,"file":"queryParser.spec.js","sourceRoot":"","sources":["../../lib/queryParser.spec.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,eAAe,CAAC;AAC5C,OAAO,EAAE,KAAK,EAAE,MAAM,uBAAuB,CAAC;AAE9C,IAAM,WAAW,GAAG;IAClB,MAAM,EAAE;QACN,KAAK,EAAE,OAAO;QACd,KAAK,EAAE,OAAO;KACf;IACD,MAAM,EAAE;QACN,KAAK,EAAE,QAAQ;QACf,KAAK,EAAE,OAAO;KACf;IACD,MAAM,EAAE;QACN,KAAK,EAAE,QAAQ;QACf,KAAK,EAAE,OAAO;QACd,KAAK,EAAE,OAAO;KACf;IACD,OAAO,EAAE;QACP,KAAK,EAAE,SAAS;KACjB;IACD,MAAM,EAAE;QACN,KAAK,EAAE,OAAO;QACd,KAAK,EAAE,OAAO;KACf;IACD,YAAY,EAAE;QACZ,KAAK,EAAE,OAAO;QACd,KAAK,EAAE,OAAO;KACf;IACD,QAAQ,EAAE;QACR,KAAK,EAAE,OAAO;QACd,KAAK,EAAE,QAAQ;KAChB;IACD,WAAW,EAAE;QACX,KAAK,EAAE,OAAO;QACd,KAAK,EAAE,QAAQ;KAChB;IACD,QAAQ,EAAE;QACR,KAAK,EAAE,oBAAoB;QAC3B,KAAK,EAAE,CAAC;QACR,SAAS,EAAE,EAAE;KACd;IACD,cAAc,EAAE;QACd,KAAK,EAAE,QAAQ;QACf,KAAK,EAAE,GAAG;QACV,IAAI,EAAE,IAAI;QACV,MAAM,EAAE,yBAAyB;KAClC;IACD,SAAS,EAAE,0BAA0B;IACrC,MAAM,EAAE,yGAAyG;CAClH,CAAC;AAEF,IAAM,MAAM,GAAG,IAAI,WAAW,CAAC,WAAW,CAAC,CAAC;AAC5C,QAAQ,CAAC,aAAa,EAAE;IACtB,EAAE,CAAC,iFAAiF,EAAE,KAAK,CAAC;QAC1F,IAAM,MAAM,GAAG,MAAM,CAAC,UAAU,CAAC,oBAAoB,CAAC,CAAC;QACvD,MAAM,CAAC,MAAM,CAAC,CAAC,UAAU,EAAE,CAAC;KAC7B,CAAC,CAAC,CAAC;IAEJ,EAAE,CAAC,6CAA6C,EAAE,KAAK,CAAC;QACtD,IAAM,MAAM,GAAG,MAAM,CAAC,UAAU,CAAC,0EAA0E,CAAC,CAAC;QAC7G,IAAM,QAAQ,GAAG,mDAAmD;YAClE,+FAA+F,CAAC;QAClG,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;KAC/B,CAAC,CAAC,CAAC;IAEJ,EAAE,CAAC,mCAAmC,EAAE,KAAK,CAAC;QAC5C,IAAM,MAAM,GAAG,MAAM,CAAC,UAAU,CAAC,iBAAiB,CAAC,CAAC;QACpD,IAAM,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC;QAC7C,MAAM,CAAC,MAAM,CAAC,CAAC,UAAU,EAAE,CAAC;KAC7B,CAAC,CAAC,CAAC;IAEJ,EAAE,CAAC,8EAA8E,EAAE,KAAK,CAAC;QACvF,MAAM,CAAC,cAAM,OAAA,MAAM,CAAC,UAAU,CAAC,oBAAoB,CAAC,EAAvC,CAAuC,CAAC,CAAC,YAAY,EAAE,CAAC;KACtE,CAAC,CAAC,CAAC;CACL,CAAC,CAAC","sourcesContent":["import { QueryParser } from './queryParser';\nimport { async } from '@angular/core/testing';\n\nconst breakpoints = {\n  phoneW: {\n    param: 'width',\n    value: '320px'\n  },\n  phoneH: {\n    param: 'height',\n    value: '800px'\n  },\n  mobile: {\n    media: 'screen',\n    param: 'width',\n    value: '667px'\n  },\n  braille: {\n    media: 'braille'\n  },\n  tablet: {\n    param: 'width',\n    value: '768px'\n  },\n  smallScreenW: {\n    param: 'width',\n    value: '960px'\n  },\n  desktopW: {\n    param: 'width',\n    value: '1024px'\n  },\n  widescreenW: {\n    param: 'width',\n    value: '1140px'\n  },\n  retina3x: {\n    param: 'device-pixel-ratio',\n    value: 2,\n    precision: .1\n  },\n  phonePortraitH: {\n    param: 'height',\n    value: 800,\n    unit: 'px',\n    suffix: '(orientation: portrait)'\n  },\n  landscape: '(orientation: landscape)',\n  iPhone: 'only screen and (min-device-width : 768px) and (max-device-width : 1024px) and (orientation : portrait)'\n};\n\nconst parser = new QueryParser(breakpoints);\ndescribe('QueryParser', () => {\n  it('should let use breakpoints with no media type and with some media type together', async(() => {\n    const result = parser.parseQuery('braille and tablet');\n    expect(result).toBeTruthy();\n  }));\n\n  it('should use proper precision with each query', async(() => {\n    const result = parser.parseQuery('<=10.30002em and <widescreenW, braille and <retina3x and <phonePortraitH');\n    const expected = '(max-width: 10.30002em) and (max-width: 1139px), ' +\n      'braille and (max-device-pixel-ratio: 1.9) and (max-height: 799.9) and (orientation: portrait)';\n    expect(result).toBe(expected);\n  }));\n\n  it('should add media to the beginning', async(() => {\n    const result = parser.parseQuery('braille, tablet');\n    const prefix = result.match(/^braille and /);\n    expect(prefix).toBeTruthy();\n  }));\n\n  it('should throw error when breakpoints with 2 different media types are present', async(() => {\n    expect(() => parser.parseQuery('braille and mobile')).toThrowError();\n  }));\n});\n"]}