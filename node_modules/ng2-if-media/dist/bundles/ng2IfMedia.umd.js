(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/core'], factory) :
	(factory((global.ng = global.ng || {}, global.ng.ifMedia = {}),global.ng.core));
}(this, (function (exports,core) { 'use strict';

var CONFIG = new core.InjectionToken('ng2-if-media.config');

var QueryParser = (function () {
    function QueryParser(breakpoints) {
        this.breakpoints = breakpoints;
    }
    QueryParser.prototype.parseQuery = function (input) {
        var _this = this;
        var queries = input.split(',');
        return queries.map(function (query) { return _this.parseSingleQuery(query); }).join(',');
    };
    QueryParser.prototype.parseSingleQuery = function (input) {
        var resultQueries = [];
        var queries = input.split(' and ');
        var possibleMedia = '';
        for (var _i = 0, queries_1 = queries; _i < queries_1.length; _i++) {
            var query = queries_1[_i];
            query = query.trim();
            var canBeEqual = query[1] === '=';
            var withoutComparison = query.replace(/^(<|>)?=?/, '');
            var breakpoint = this.breakpoints[withoutComparison];
            // If no breakpoint was found, treat as exact media query unless it can be interpreted as a number, e.g. '<980px'
            if (parseFloat(withoutComparison)) {
                breakpoint = {
                    param: 'width',
                    value: withoutComparison
                };
            }
            else if (!breakpoint) {
                resultQueries.push(query);
                continue;
            }
            if (typeof breakpoint === 'string') {
                resultQueries.push(breakpoint);
                continue;
            }
            var media = breakpoint.media;
            if (!possibleMedia && media) {
                possibleMedia = media;
            }
            if (media && media !== possibleMedia) {
                throw new Error("Clash of media property used for different breakpoints in " + breakpoint);
            }
            var value = breakpoint.value, param = breakpoint.param;
            var numValue = value;
            var units = '';
            var precisionVal = void 0;
            if (typeof value === 'string') {
                var match = breakpoint.value.match(/[a-zA-Z]+/);
                var unitIndex = (match && match.index) || value.length;
                var number = value.slice(0, unitIndex);
                numValue = parseFloat(number);
                units = value.slice(unitIndex);
                if (number.includes('.')) {
                    precisionVal = 1 / (Math.pow(10, (unitIndex - number.indexOf('.') - 1)));
                }
            }
            if (canBeEqual) {
                precisionVal = 0;
            }
            else if (breakpoint.precision) {
                precisionVal = breakpoint.precision;
            }
            else if (units === 'px') {
                precisionVal = 1;
            }
            else if (!precisionVal) {
                precisionVal = 0.1;
            }
            // Can also use no value, e.g. { media: 'screen' }
            if (value) {
                switch (query[0]) {
                    case '<':
                        query = "(max-" + breakpoint.param + ": " + (numValue - precisionVal) + units + ")";
                        break;
                    case '>':
                        query = "(min-" + breakpoint.param + ": " + (numValue + precisionVal) + units + ")";
                        break;
                    default:
                        query = "(" + breakpoint.param + ": " + value + ")";
                        break;
                }
            }
            else {
                query = '';
            }
            var suffix = breakpoint.suffix;
            if (suffix) {
                query = query ? query + " and " + suffix : suffix;
            }
            if (query) {
                resultQueries.push(query);
            }
        }
        var prefix = possibleMedia ? possibleMedia + ' and ' : '';
        return prefix + resultQueries.join(' and ');
    };
    return QueryParser;
}());

var ReflectionContainer = (function () {
    function ReflectionContainer(service, component) {
        this.service = service;
        this.component = component;
    }
    ReflectionContainer.prototype.when = function (query, matchFn) {
        this.createReflection(query, matchFn, true);
    };
    ReflectionContainer.prototype.onChange = function (query, matchFn) {
        this.createReflection(query, matchFn, false);
    };
    ReflectionContainer.prototype.createReflection = function (query, matchFn, onlyWhenMatched) {
        if (typeof query === 'string') {
            this.singleReflection(query, matchFn, onlyWhenMatched);
        }
        else if (typeof query === 'object') {
            this.objectReflection(query, onlyWhenMatched);
        }
        else {
            throw new Error('Unsupported breakpoint parameter, please use a string or an object with breakpoints as keys.');
        }
    };
    ReflectionContainer.prototype.objectReflection = function (queryObj, onlyWhenMatched) {
        if (onlyWhenMatched === void 0) { onlyWhenMatched = false; }
        this.service.addObjectReflection(this, queryObj, onlyWhenMatched);
    };
    ReflectionContainer.prototype.singleReflection = function (query, matchLogic, onlyWhenMatched) {
        if (onlyWhenMatched === void 0) { onlyWhenMatched = false; }
        if (typeof matchLogic === 'function') {
            this.service.addSingleReflection(this, { query: query, matchFn: matchLogic, onlyWhenMatched: onlyWhenMatched });
        }
        else if (typeof matchLogic === 'object') {
            this.service.addSingleReflection(this, { query: query, newState: matchLogic, onlyWhenMatched: onlyWhenMatched });
        }
    };
    ReflectionContainer.prototype.deregister = function () {
        this.service.removeReflection(this);
    };
    return ReflectionContainer;
}());
var IfMediaService = (function () {
    function IfMediaService(config) {
        this.elements = new Map();
        this.reflections = new Map();
        this.throttle = 100;
        this.isThrottling = false;
        this.resized = false;
        this.throttle = config.throttle;
        this.parser = new QueryParser(config.breakpoints);
        if (typeof window !== 'undefined') {
            window.addEventListener('resize', this.onResize.bind(this));
        }
    }
    IfMediaService.prototype.register = function (component) {
        return new ReflectionContainer({
            addSingleReflection: this.addSingleReflection.bind(this),
            addObjectReflection: this.addObjectReflection.bind(this),
            removeReflection: this.removeReflection.bind(this)
        }, component);
    };
    IfMediaService.prototype.isMedia = function (query) {
        if (typeof window === 'undefined') {
            return false;
        }
        var mediaQuery = this.parser.parseQuery(query);
        return window.matchMedia(mediaQuery).matches;
    };
    IfMediaService.prototype.sendNotifications = function () {
        this.resolveReflections();
        this.notifyElements();
    };
    IfMediaService.prototype.throttledNotify = function () {
        var _this = this;
        if (this.resized) {
            this.sendNotifications();
            this.notifyTimeout = setTimeout(function () {
                _this.throttledNotify();
            }, this.throttle);
        }
        else {
            clearTimeout(this.notifyTimeout);
            this.isThrottling = false;
        }
        this.resized = false;
    };
    IfMediaService.prototype.onResize = function () {
        var _this = this;
        this.resized = true;
        if (!this.isThrottling) {
            this.sendNotifications();
            this.isThrottling = true;
            setTimeout(function () { return _this.throttledNotify(); }, this.throttle);
        }
    };
    IfMediaService.prototype.addSingleReflection = function (container, _a) {
        var _b = _a.query, query = _b === void 0 ? '' : _b, _c = _a.matchFn, matchFn = _c === void 0 ? function (m) { } : _c, _d = _a.onlyWhenMatched, onlyWhenMatched = _d === void 0 ? false : _d, _e = _a.newState, newState = _e === void 0 ? null : _e;
        var arr = this.reflections.get(container) || [];
        var matches = this.isMedia(query);
        this.reflections.set(container, arr.concat({ query: query, matchFn: matchFn, matches: matches, onlyWhenMatched: onlyWhenMatched, newState: newState }));
        var firstLoad = !onlyWhenMatched || matches;
        if (typeof matchFn === 'function' && firstLoad) {
            matchFn(matches);
        }
        if (newState && firstLoad) {
            this.mergeNewState(container.component, newState);
        }
    };
    IfMediaService.prototype.addObjectReflection = function (container, queryObj, onlyWhenMatched) {
        if (onlyWhenMatched === void 0) { onlyWhenMatched = false; }
        for (var _i = 0, _a = Object.keys(queryObj); _i < _a.length; _i++) {
            var query = _a[_i];
            var matchLogic = queryObj[query];
            if (typeof matchLogic === 'function') {
                this.addSingleReflection(container, { query: query, matchFn: matchLogic, onlyWhenMatched: onlyWhenMatched });
            }
            else if (typeof matchLogic === 'object') {
                this.addSingleReflection(container, { query: query, newState: matchLogic, onlyWhenMatched: onlyWhenMatched });
            }
        }
    };
    IfMediaService.prototype.mergeNewState = function (component, newState) {
        for (var _i = 0, _a = Object.keys(newState); _i < _a.length; _i++) {
            var property = _a[_i];
            component[property] = newState[property];
        }
    };
    IfMediaService.prototype.removeReflection = function (container) {
        this.reflections.delete(container);
    };
    IfMediaService.prototype.resolveReflections = function () {
        var _this = this;
        this.reflections.forEach(function (val, container) {
            var newVal = [];
            for (var _i = 0, val_1 = val; _i < val_1.length; _i++) {
                var _a = val_1[_i], query = _a.query, matchFn = _a.matchFn, oldMatch = _a.matches, onlyWhenMatched = _a.onlyWhenMatched, newState = _a.newState;
                var newMatch = _this.isMedia(query);
                // Don't do anything if the flag didn't change
                if (newMatch === oldMatch) {
                    newVal.push({ query: query, matchFn: matchFn, matches: newMatch, onlyWhenMatched: onlyWhenMatched, newState: newState });
                    continue;
                }
                var resolve = false;
                if (onlyWhenMatched && !oldMatch) {
                    resolve = true;
                }
                else if (!onlyWhenMatched) {
                    resolve = true;
                }
                if (resolve) {
                    if (newState) {
                        _this.mergeNewState(container.component, newState);
                    }
                    else if (matchFn) {
                        matchFn(newMatch);
                    }
                }
                newVal.push({ query: query, matchFn: matchFn, matches: newMatch, onlyWhenMatched: onlyWhenMatched, newState: newState });
            }
            _this.reflections.set(container, newVal);
        });
    };
    IfMediaService.prototype.registerElement = function (element, query) {
        this.elements.set(element, query);
        if (this.isMedia(query)) {
            element.show();
        }
        else {
            element.hide();
        }
    };
    IfMediaService.prototype.deregisterElement = function (element) {
        this.elements.delete(element);
    };
    IfMediaService.prototype.notifyElements = function () {
        var _this = this;
        this.elements.forEach(function (query, el) {
            if (_this.isMedia(query)) {
                el.show();
            }
            else {
                el.hide();
            }
        });
    };
    IfMediaService.decorators = [
        { type: core.Injectable },
    ];
    /** @nocollapse */
    IfMediaService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: core.Inject, args: [CONFIG,] },] },
    ]; };
    return IfMediaService;
}());

var IfMediaDirective = (function () {
    function IfMediaDirective(templateRef, viewContainer, mediaService) {
        this.templateRef = templateRef;
        this.viewContainer = viewContainer;
        this.mediaService = mediaService;
        this.hidden = true;
    }
    Object.defineProperty(IfMediaDirective.prototype, "ngIfMedia", {
        set: function (query) {
            this.media = query;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IfMediaDirective.prototype, "ifMedia", {
        set: function (query) {
            this.media = query;
        },
        enumerable: true,
        configurable: true
    });
    IfMediaDirective.prototype.ngOnInit = function () {
        this.mediaService.registerElement(this, this.media);
    };
    IfMediaDirective.prototype.hide = function () {
        if (!this.hidden) {
            this.viewContainer.clear();
            this.hidden = true;
        }
    };
    IfMediaDirective.prototype.show = function () {
        if (this.hidden) {
            this.viewContainer.createEmbeddedView(this.templateRef);
            this.hidden = false;
        }
    };
    IfMediaDirective.prototype.ngOnDestroy = function () {
        this.mediaService.deregisterElement(this);
    };
    IfMediaDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: '[ifMedia], [ngIfMedia]'
                },] },
    ];
    /** @nocollapse */
    IfMediaDirective.ctorParameters = function () { return [
        { type: core.TemplateRef, },
        { type: core.ViewContainerRef, },
        { type: IfMediaService, },
    ]; };
    IfMediaDirective.propDecorators = {
        "ngIfMedia": [{ type: core.Input },],
        "ifMedia": [{ type: core.Input },],
    };
    return IfMediaDirective;
}());

var defaultConfig = {
    throttle: 100,
    breakpoints: {}
};

var vendorBreakpoints = {
    bootstrap: {
        xs: '(max-width: 575px)',
        sm: '(min-width: 576px)',
        md: '(min-width: 768px)',
        lg: '(min-width: 992px)',
        xl: '(min-width: 1200px)'
    }
};

var ɵ0 = defaultConfig;
var IfMediaModule = (function () {
    function IfMediaModule() {
    }
    IfMediaModule.withConfig = function (config) {
        var mergeVendorBreakpoints = function (obj, name) {
            if (vendorBreakpoints[name]) {
                return Object.assign(obj, vendorBreakpoints[name]);
            }
            else {
                throw new Error("No breakpoints found for vendor '" + name + "'. Check your IfMedia import config.");
            }
        };
        var _a = config.breakpoints, customBreakpoints = _a === void 0 ? {} : _a, _b = config.vendorBreakpoints, vendorNames = _b === void 0 ? [] : _b;
        if (Array.isArray(vendorNames)) {
            config.breakpoints = vendorNames.reduce(mergeVendorBreakpoints, {});
        }
        else {
            config.breakpoints = mergeVendorBreakpoints({}, vendorNames);
        }
        // Custom breakpoints should always override vendors
        config.breakpoints = Object.assign(config.breakpoints, customBreakpoints);
        return {
            ngModule: this,
            providers: [
                { provide: CONFIG, useValue: Object.assign(defaultConfig, config) }
            ]
        };
    };
    IfMediaModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [],
                    providers: [
                        IfMediaService,
                        { provide: CONFIG, useValue: ɵ0 }
                    ],
                    declarations: [
                        IfMediaDirective
                    ],
                    exports: [
                        IfMediaDirective
                    ]
                },] },
    ];
    /** @nocollapse */
    IfMediaModule.ctorParameters = function () { return []; };
    return IfMediaModule;
}());

exports.IfMediaModule = IfMediaModule;
exports.IfMediaService = IfMediaService;
exports.IfMediaDirective = IfMediaDirective;

Object.defineProperty(exports, '__esModule', { value: true });

})));
