{"version":3,"file":"ng4-validators.umd.min.js","sources":["~/ng4-validators/src/app/util/lang.ts","~/ng4-validators/src/app/array-length/validator.ts","~/ng4-validators/src/app/base64/validator.ts","~/ng4-validators/src/app/credit-card/validator.ts","~/ng4-validators/src/app/date/validator.ts","~/ng4-validators/src/app/date-ios/validator.ts","~/ng4-validators/src/app/digits/validator.ts","~/ng4-validators/src/app/email/validator.ts","~/ng4-validators/src/app/equal/validator.ts","~/ng4-validators/src/app/equal-to/validator.ts","~/ng4-validators/src/app/greater-than/validator.ts","~/ng4-validators/src/app/greater-than-equal/validator.ts","~/ng4-validators/src/app/json/validator.ts","~/ng4-validators/src/app/less-than/validator.ts","~/ng4-validators/src/app/less-than-equal/validator.ts","~/ng4-validators/src/app/max/validator.ts","~/ng4-validators/src/app/max-date/validator.ts","~/ng4-validators/src/app/min/validator.ts","~/ng4-validators/src/app/min-date/validator.ts","~/ng4-validators/src/app/not-equal/validator.ts","~/ng4-validators/src/app/not-equal-to/validator.ts","~/ng4-validators/src/app/number/validator.ts","~/ng4-validators/src/app/property/validator.ts","~/ng4-validators/src/app/range/validator.ts","~/ng4-validators/src/app/range-length/validator.ts","~/ng4-validators/src/app/uuid/validator.ts","~/ng4-validators/src/app/url/validator.ts","~/ng4-validators/src/app/array-length/directive.ts","~/ng4-validators/src/app/base64/directive.ts","~/ng4-validators/src/app/credit-card/directive.ts","~/ng4-validators/src/app/date/directive.ts","~/ng4-validators/src/app/date-ios/directive.ts","~/ng4-validators/src/app/digits/directive.ts","~/ng4-validators/src/app/email/directive.ts","~/ng4-validators/src/app/equal/directive.ts","~/ng4-validators/src/app/equal-to/directive.ts","~/ng4-validators/src/app/greater-than/directive.ts","~/ng4-validators/src/app/greater-than-equal/directive.ts","~/ng4-validators/src/app/json/directive.ts","~/ng4-validators/src/app/less-than/directive.ts","~/ng4-validators/src/app/less-than-equal/directive.ts","~/ng4-validators/src/app/max/directive.ts","~/ng4-validators/src/app/max-date/directive.ts","~/ng4-validators/src/app/min/directive.ts","~/ng4-validators/src/app/min-date/directive.ts","~/ng4-validators/src/app/not-equal/directive.ts","~/ng4-validators/src/app/not-equal-to/directive.ts","~/ng4-validators/src/app/number/directive.ts","~/ng4-validators/src/app/property/directive.ts","~/ng4-validators/src/app/range/directive.ts","~/ng4-validators/src/app/range-length/directive.ts","~/ng4-validators/src/app/url/directive.ts","~/ng4-validators/src/app/uuid/directive.ts","~/ng4-validators/src/app/custom-forms.module.ts"],"sourcesContent":["\n/**\n * @param {?} obj\n * @return {?}\n */\nexport function isPresent(obj: any): boolean {\n  return obj !== undefined && obj !== null;\n}\n/**\n * @param {?} obj\n * @return {?}\n */\nexport function isDate(obj: any): boolean {\n  return !/Invalid|NaN/.test(new Date(obj).toString());\n}\n/**\n * @param {?} obj\n * @return {?}\n */\nexport function parseDate(obj: any): string {\n  if (typeof obj === 'object' && obj.year != null && obj.month != null && obj.day != null) {\n    return obj.year + '-' + obj.month + '-' + obj.day;\n  }\n  return obj;\n}\n","import { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\n\nimport { isPresent } from '../util/lang';\n\nexport const /** @type {?} */ arrayLength = (value: string): ValidatorFn => {\n  return (control: AbstractControl): {[key: string]: any} => {\n\n    if (isPresent(Validators.required(control))) {\n      return null;\n    }\n\n    const /** @type {?} */ obj = control.value;\n    return Array.isArray(obj) && obj.length >= +value ? null : { arrayLength: +value };\n  };\n};\n","import { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\n\nimport { isPresent } from '../util/lang';\n\nexport const /** @type {?} */ base64: ValidatorFn = (control: AbstractControl): {[key: string]: boolean} => {\n  if (isPresent(Validators.required(control))) {\n    return null;\n  }\n\n  const /** @type {?} */ v: string = control.value;\n  return /^(?:[A-Z0-9+\\/]{4})*(?:[A-Z0-9+\\/]{2}==|[A-Z0-9+\\/]{3}=|[A-Z0-9+\\/]{4})$/i.test(v) ? null : {'base64': true};\n};\n","import { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\n\nimport { isPresent } from '../util/lang';\n\nexport const /** @type {?} */ creditCard: ValidatorFn = (control: AbstractControl): {[key: string]: boolean} => {\n  if (isPresent(Validators.required(control))) {\n    return null;\n  }\n\n  const /** @type {?} */ v: string = control.value;\n\n  const /** @type {?} */ sanitized = v.replace(/[^0-9]+/g, '');\n\n  // problem with chrome\n  /* tslint:disable */\n  if (!(/^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11})$/.test(sanitized))) {\n    return {creditCard: true};\n  }\n  /* tslint:enable */\n\n  let /** @type {?} */ sum = 0;\n  let /** @type {?} */ digit;\n  let /** @type {?} */ tmpNum;\n  let /** @type {?} */ shouldDouble;\n  for (let /** @type {?} */ i = sanitized.length - 1; i >= 0; i--) {\n    digit = sanitized.substring(i, (i + 1));\n    tmpNum = parseInt(digit, 10);\n    if (shouldDouble) {\n      tmpNum *= 2;\n      if (tmpNum >= 10) {\n        sum += ((tmpNum % 10) + 1);\n      } else {\n        sum += tmpNum;\n      }\n    } else {\n      sum += tmpNum;\n    }\n    shouldDouble = !shouldDouble;\n  }\n\n  if (Boolean((sum % 10) === 0 ? sanitized : false)) {\n    return null;\n  }\n\n  return {creditCard: true};\n};\n","import { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\n\nimport { isPresent, isDate } from '../util/lang';\n\nexport const /** @type {?} */ date: ValidatorFn = (control: AbstractControl): {[key: string]: boolean} => {\n  if (isPresent(Validators.required(control))) {\n    return null;\n  }\n\n  const /** @type {?} */ v: string = control.value;\n  return isDate(v) ? null : {date: true};\n};\n","import { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\n\nimport { isPresent, isDate } from '../util/lang';\n\nexport const /** @type {?} */ dateISO: ValidatorFn = (control: AbstractControl): {[key: string]: boolean} => {\n  if (isPresent(Validators.required(control))) {\n    return null;\n  }\n\n  const /** @type {?} */ v: string = control.value;\n  return /^\\d{4}[\\/\\-](0?[1-9]|1[012])[\\/\\-](0?[1-9]|[12][0-9]|3[01])$/.test(v) ? null : {dateISO: true};\n};\n","import { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\n\nimport { isPresent } from '../util/lang';\n\nexport const /** @type {?} */ digits: ValidatorFn = (control: AbstractControl): {[key: string]: boolean} => {\n  if (isPresent(Validators.required(control))) {\n    return null;\n  }\n\n  const /** @type {?} */ v: string = control.value;\n  return /^\\d+$/.test(v) ? null : {digits: true};\n};\n","import { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\n\nimport { isPresent } from '../util/lang';\n\nexport const /** @type {?} */ email: ValidatorFn = (control: AbstractControl): {[key: string]: boolean} => {\n  if (isPresent(Validators.required(control))) {\n    return null;\n  }\n\n  const /** @type {?} */ v: string = control.value;\n  /* tslint:disable */\n  return /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test(v) ? null : {'email': true};\n  /* tslint:enable */\n};\n","import { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\n\nimport { isPresent } from '../util/lang';\n\nexport const /** @type {?} */ equal = (val: any): ValidatorFn => {\n  return (control: AbstractControl): {[key: string]: any} => {\n    if (isPresent(Validators.required(control))) {\n      return null;\n    }\n\n    const /** @type {?} */ v: any = control.value;\n\n    return val === v ? null : {equal: true};\n  };\n};\n","import { AbstractControl, ValidatorFn } from '@angular/forms';\n\nexport const /** @type {?} */ equalTo = (equalControl: AbstractControl): ValidatorFn => {\n  let /** @type {?} */ subscribe = false;\n\n  return (control: AbstractControl): {[key: string]: boolean} => {\n    if (!subscribe) {\n      subscribe = true;\n      equalControl.valueChanges.subscribe(() => {\n        control.updateValueAndValidity();\n      });\n    }\n\n    const /** @type {?} */ v: string = control.value;\n\n    return equalControl.value === v ? null : {equalTo: true};\n  };\n};\n","import { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\n\nimport { isPresent } from '../util/lang';\n\nexport const /** @type {?} */ gt = (value: number): ValidatorFn => {\n  return (control: AbstractControl): {[key: string]: boolean} => {\n    if (!isPresent(value)) {\n      return null;\n    }\n    if (isPresent(Validators.required(control))) {\n      return null;\n    }\n\n    const /** @type {?} */ v: number = +control.value;\n    return v > +value ? null : {gt: true};\n  };\n};\n","import { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\n\nimport { isPresent } from '../util/lang';\n\nexport const /** @type {?} */ gte = (value: number): ValidatorFn => {\n  return (control: AbstractControl): {[key: string]: boolean} => {\n    if (!isPresent(value)) {\n      return null;\n    }\n    if (isPresent(Validators.required(control))) {\n      return null;\n    }\n\n    const /** @type {?} */ v: number = +control.value;\n    return v >= +value ? null : {gte: true};\n  };\n};\n","import { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\n\nimport { isPresent } from '../util/lang';\n\nexport const /** @type {?} */ json: ValidatorFn = (control: AbstractControl): {[key: string]: boolean} => {\n  if (isPresent(Validators.required(control))) {\n    return null;\n  }\n\n  const /** @type {?} */ v: string = control.value;\n\n  try {\n    const /** @type {?} */ obj = JSON.parse(v);\n\n    if (Boolean(obj) && typeof obj === 'object') {\n      return null;\n    }\n  } catch ( /** @type {?} */e) { }\n  return {json: true};\n};\n","import { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\n\nimport { isPresent } from '../util/lang';\n\nexport const /** @type {?} */ lt = (value: number): ValidatorFn => {\n  return (control: AbstractControl): {[key: string]: boolean} => {\n    if (!isPresent(value)) {\n      return null;\n    }\n    if (isPresent(Validators.required(control))) {\n      return null;\n    }\n\n    const /** @type {?} */ v: number = +control.value;\n    return v < +value ? null : {lt: true};\n  };\n};\n","import { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\n\nimport { isPresent } from '../util/lang';\n\nexport const /** @type {?} */ lte = (value: number): ValidatorFn => {\n  return (control: AbstractControl): {[key: string]: boolean} => {\n    if (!isPresent(value)) {\n      return null;\n    }\n    if (isPresent(Validators.required(control))) {\n      return null;\n    }\n\n    const /** @type {?} */ v: number = +control.value;\n    return v <= +value ? null : {lte: true};\n  };\n};\n","import { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\n\nimport { isPresent } from '../util/lang';\n\nexport const /** @type {?} */ max = (value: number): ValidatorFn => {\n  return (control: AbstractControl): {[key: string]: any} => {\n    if (!isPresent(value)) {\n      return null;\n    }\n    if (isPresent(Validators.required(control))) {\n      return null;\n    }\n\n    const /** @type {?} */ v: number = +control.value;\n    return v <= +value ? null : {actualValue: v, requiredValue: +value, max: true};\n  };\n};\n","import { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\nimport { isPresent, isDate, parseDate } from '../util/lang';\n\nexport const /** @type {?} */ maxDate = (value: any): ValidatorFn => {\n\n  value = parseDate(value);\n\n  if (!isDate(value) && !(value instanceof Function)) {\n    throw Error('maxDate value must be or return a formatted date');\n  }\n\n  return (control: AbstractControl): {[key: string]: any} => {\n    if (isPresent(Validators.required(control))) {\n      return null;\n    }\n\n    const /** @type {?} */ d = new Date(control.value).getTime();\n\n    if (!isDate(d)) {\n      return { value: true };\n    }\n    if (value instanceof Function) {\n      value = value();\n    }\n\n    return d <= new Date(value).getTime() ? null : {maxDate: true};\n  };\n};\n","import { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\n\nimport { isPresent } from '../util/lang';\n\nexport const /** @type {?} */ min = (value: number): ValidatorFn => {\n  return (control: AbstractControl): {[key: string]: any} => {\n    if (!isPresent(value)) {\n      return null;\n    }\n    if (isPresent(Validators.required(control))) {\n      return null;\n    }\n\n    const /** @type {?} */ v: number = +control.value;\n    return v >= +value ? null : {actualValue: v, requiredValue: +value, min: true};\n  };\n};\n","import { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\n\nimport { isPresent, isDate, parseDate } from '../util/lang';\n\nexport const /** @type {?} */ minDate = (value: any): ValidatorFn => {\n\n  value = parseDate(value);\n\n  if (!isDate(value) && !(value instanceof Function)) {\n    throw Error('minDate value must be or return a formatted date');\n  }\n\n  return (control: AbstractControl): {[key: string]: any} => {\n    if (isPresent(Validators.required(control))) {\n      return null;\n    }\n\n    const /** @type {?} */ d = new Date(control.value).getTime();\n\n    if (!isDate(d)) {\n      return { value: true };\n    }\n    if (value instanceof Function) {\n      value = value();\n    }\n\n    return d >= new Date(value).getTime() ? null : { minDate: true };\n  };\n};\n","import { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\n\nimport { isPresent } from '../util/lang';\n\nexport const /** @type {?} */ notEqual = (val: any): ValidatorFn => {\n  return (control: AbstractControl): {[key: string]: boolean} => {\n    if (isPresent(Validators.required(control))) {\n      return null;\n    }\n\n    const /** @type {?} */ v: any = control.value;\n\n    return val !== v ? null : {notEqual: true};\n  };\n};\n","import { AbstractControl, ValidatorFn } from '@angular/forms';\n\nexport const /** @type {?} */ notEqualTo = (notEqualControl: AbstractControl): ValidatorFn => {\n  let /** @type {?} */ subscribe = false;\n  return (control: AbstractControl): {[key: string]: boolean} => {\n    if (!subscribe) {\n      subscribe = true;\n      notEqualControl.valueChanges.subscribe(() => {\n        control.updateValueAndValidity();\n      });\n    }\n\n    const /** @type {?} */ v: string = control.value;\n\n    return notEqualControl.value !== v ? null : {notEqualTo: true};\n  };\n};\n","import { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\n\nimport { isPresent } from '../util/lang';\n\nexport const /** @type {?} */ number: ValidatorFn = (control: AbstractControl): {[key: string]: boolean} => {\n  if (isPresent(Validators.required(control))) {\n    return null;\n  }\n\n  const /** @type {?} */ v: string = control.value;\n  return /^(?:-?\\d+|-?\\d{1,3}(?:,\\d{3})+)?(?:\\.\\d+)?$/.test(v) ? null : {'number': true};\n};\n","import { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\n\nimport { isPresent } from '../util/lang';\n\nexport const /** @type {?} */ property = (value: string): ValidatorFn => {\n  return (control: AbstractControl): {[key: string]: any} => {\n\n    if (isPresent(Validators.required(control))) {\n      return null;\n    }\n\n    const /** @type {?} */ properties = value.split(',');\n\n    const /** @type {?} */ obj = control.value;\n    let /** @type {?} */ isValid = true;\n    for (const /** @type {?} */ prop of properties) {\n      if (obj[prop] == null) {\n        isValid = false;\n        break;\n      }\n    }\n    return isValid ? null : { hasProperty: true, property: value };\n  };\n};\n","import { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\n\nimport { isPresent } from '../util/lang';\n\nexport const /** @type {?} */ range = (value: Array<number>): ValidatorFn => {\n  return (control: AbstractControl): {[key: string]: any} => {\n    if (!isPresent(value)) {\n      return null;\n    }\n    if (isPresent(Validators.required(control))) {\n      return null;\n    }\n\n    const /** @type {?} */ v: number = +control.value;\n    return v >= value[0] && v <= value[1] ? null : {actualValue: v, requiredValue: value, range: true};\n  };\n};\n","import { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\n\nimport { isPresent } from '../util/lang';\n\nexport const /** @type {?} */ rangeLength = (value: Array<number>): ValidatorFn => {\n  return (control: AbstractControl): {[key: string]: boolean} => {\n    if (!isPresent(value)) {\n      return null;\n    }\n    if (isPresent(Validators.required(control))) {\n      return null;\n    }\n\n    const /** @type {?} */ v: string = control.value;\n    return v.length >= value[0] && v.length <= value[1] ? null : {rangeLength: true};\n  };\n};\n","import { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\n\nimport { isPresent } from '../util/lang';\n\nconst /** @type {?} */ uuids = {\n  '3': /^[0-9A-F]{8}-[0-9A-F]{4}-3[0-9A-F]{3}-[0-9A-F]{4}-[0-9A-F]{12}$/i,\n  '4': /^[0-9A-F]{8}-[0-9A-F]{4}-4[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,\n  '5': /^[0-9A-F]{8}-[0-9A-F]{4}-5[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,\n  'all': /^[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}$/i\n};\n\nexport const /** @type {?} */ uuid = (version?: string): ValidatorFn => {\n  return (control: AbstractControl): {[key: string]: any} => {\n    if (isPresent(Validators.required(control))) {\n      return null;\n    }\n\n    const /** @type {?} */ v: string = control.value;\n    const /** @type {?} */ pattern = uuids[version] || uuids.all;\n\n    return (new RegExp(pattern)).test(v) ? null : {uuid: true};\n  };\n};\n","import { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\n\nimport { isPresent } from '../util/lang';\n\nexport const /** @type {?} */ url: ValidatorFn = (control: AbstractControl): {[key: string]: boolean} => {\n  if (isPresent(Validators.required(control))) {\n    return null;\n  }\n\n  const /** @type {?} */ v: string = control.value;\n  /* tslint:disable */\n  return /^(?:(?:(?:https?|ftp):)?\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})).?)(?::\\d{2,5})?(?:[/?#]\\S*)?$/i.test(v) ? null : {'url': true};\n  /* tslint:enable */\n};\n","import { Directive, Input, forwardRef, OnInit, OnChanges, SimpleChanges } from '@angular/core';\nimport { NG_VALIDATORS, Validator, ValidatorFn, AbstractControl } from '@angular/forms';\n\nimport { arrayLength } from './validator';\n\nconst /** @type {?} */ ARRAY_LENGTH_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => ArrayLengthValidator),\n  multi: true\n};\nexport class ArrayLengthValidator implements Validator, OnInit, OnChanges {\n   arrayLength: string;\nprivate validator: ValidatorFn;\nprivate onChange: () => void;\n/**\n * @return {?}\n */\nngOnInit() {\n    this.validator = arrayLength(this.arrayLength);\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    for (const /** @type {?} */ key in changes) {\n      if (key === 'arrayLength') {\n        this.validator = arrayLength(changes[key].currentValue);\n        if (this.onChange) {\n          this.onChange();\n        }\n      }\n    }\n  }\n/**\n * @param {?} c\n * @return {?}\n */\nvalidate(c: AbstractControl): {[key: string]: any} {\n    return this.validator(c);\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnValidatorChange(fn: () => void): void {\n    this.onChange = fn;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[arrayLength][formControlName],[arrayLength][formControl],[arrayLength][ngModel]',\n  providers: [ARRAY_LENGTH_VALIDATOR]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'arrayLength': [{ type: Input },],\n};\n}\n\nfunction ArrayLengthValidator_tsickle_Closure_declarations() {\n/** @type {?} */\nArrayLengthValidator.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nArrayLengthValidator.ctorParameters;\n/** @type {?} */\nArrayLengthValidator.propDecorators;\n/** @type {?} */\nArrayLengthValidator.prototype.arrayLength;\n/** @type {?} */\nArrayLengthValidator.prototype.validator;\n/** @type {?} */\nArrayLengthValidator.prototype.onChange;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, forwardRef } from '@angular/core';\nimport { NG_VALIDATORS, Validator, AbstractControl } from '@angular/forms';\n\nimport { base64 } from './validator';\n\nconst /** @type {?} */ BASE64_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => Base64Validator),\n  multi: true\n};\nexport class Base64Validator implements Validator {\n/**\n * @param {?} c\n * @return {?}\n */\nvalidate(c: AbstractControl): {[key: string]: any} {\n    return base64(c);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[base64][formControlName],[base64][formControl],[base64][ngModel]',\n  providers: [BASE64_VALIDATOR]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction Base64Validator_tsickle_Closure_declarations() {\n/** @type {?} */\nBase64Validator.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBase64Validator.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, forwardRef } from '@angular/core';\nimport { NG_VALIDATORS, Validator, AbstractControl } from '@angular/forms';\n\nimport { creditCard } from './validator';\n\nconst /** @type {?} */ CREDIT_CARD_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => CreditCardValidator),\n  multi: true\n};\nexport class CreditCardValidator implements Validator {\n/**\n * @param {?} c\n * @return {?}\n */\nvalidate(c: AbstractControl): {[key: string]: any} {\n    return creditCard(c);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[creditCard][formControlName],[creditCard][formControl],[creditCard][ngModel]',\n  providers: [CREDIT_CARD_VALIDATOR]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CreditCardValidator_tsickle_Closure_declarations() {\n/** @type {?} */\nCreditCardValidator.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCreditCardValidator.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, forwardRef } from '@angular/core';\nimport { NG_VALIDATORS, Validator, AbstractControl } from '@angular/forms';\n\nimport { date } from './validator';\n\nconst /** @type {?} */ DATE_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => DateValidator),\n  multi: true\n};\nexport class DateValidator implements Validator {\n/**\n * @param {?} c\n * @return {?}\n */\nvalidate(c: AbstractControl): {[key: string]: any} {\n    return date(c);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[date][formControlName],[date][formControl],[date][ngModel]',\n  providers: [DATE_VALIDATOR]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction DateValidator_tsickle_Closure_declarations() {\n/** @type {?} */\nDateValidator.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDateValidator.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, forwardRef } from '@angular/core';\nimport { NG_VALIDATORS, Validator, AbstractControl } from '@angular/forms';\n\nimport { dateISO } from './validator';\n\nconst /** @type {?} */ DATE_ISO_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => DateISOValidator),\n  multi: true\n};\nexport class DateISOValidator implements Validator {\n/**\n * @param {?} c\n * @return {?}\n */\nvalidate(c: AbstractControl): {[key: string]: any} {\n    return dateISO(c);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[dateISO][formControlName],[dateISO][formControl],[dateISO][ngModel]',\n  providers: [DATE_ISO_VALIDATOR]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction DateISOValidator_tsickle_Closure_declarations() {\n/** @type {?} */\nDateISOValidator.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDateISOValidator.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, forwardRef } from '@angular/core';\nimport { NG_VALIDATORS, Validator, AbstractControl } from '@angular/forms';\n\nimport { digits } from './validator';\n\nconst /** @type {?} */ DIGITS_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => DigitsValidator),\n  multi: true\n};\nexport class DigitsValidator implements Validator {\n/**\n * @param {?} c\n * @return {?}\n */\nvalidate(c: AbstractControl): {[key: string]: any} {\n    return digits(c);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[digits][formControlName],[digits][formControl],[digits][ngModel]',\n  providers: [DIGITS_VALIDATOR]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction DigitsValidator_tsickle_Closure_declarations() {\n/** @type {?} */\nDigitsValidator.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDigitsValidator.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, forwardRef } from '@angular/core';\nimport { NG_VALIDATORS, Validator, AbstractControl } from '@angular/forms';\n\nimport { email } from './validator';\n\nconst /** @type {?} */ EMAIL_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => EmailValidator),\n  multi: true\n};\nexport class EmailValidator implements Validator {\n/**\n * @param {?} c\n * @return {?}\n */\nvalidate(c: AbstractControl): {[key: string]: any} {\n    return email(c);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[email][formControlName],[email][formControl],[email][ngModel]',\n  providers: [EMAIL_VALIDATOR]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction EmailValidator_tsickle_Closure_declarations() {\n/** @type {?} */\nEmailValidator.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nEmailValidator.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, Input, forwardRef, OnInit, SimpleChanges, OnChanges } from '@angular/core';\nimport { NG_VALIDATORS, Validator, ValidatorFn, AbstractControl } from '@angular/forms';\n\nimport { equal } from './validator';\n\nconst /** @type {?} */ EQUAL_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => EqualValidator),\n  multi: true\n};\nexport class EqualValidator implements Validator, OnInit, OnChanges {\n   equal: any;\nprivate validator: ValidatorFn;\nprivate onChange: () => void;\n/**\n * @return {?}\n */\nngOnInit() {\n    this.validator = equal(this.equal);\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    for (const /** @type {?} */ key in changes) {\n      if (key === 'equal') {\n        this.validator = equal(changes[key].currentValue);\n        if (this.onChange) {\n          this.onChange();\n        }\n      }\n    }\n  }\n/**\n * @param {?} c\n * @return {?}\n */\nvalidate(c: AbstractControl): {[key: string]: any} {\n    return this.validator(c);\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnValidatorChange(fn: () => void): void {\n    this.onChange = fn;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[equal][formControlName],[equal][formControl],[equal][ngModel]',\n  providers: [EQUAL_VALIDATOR]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'equal': [{ type: Input },],\n};\n}\n\nfunction EqualValidator_tsickle_Closure_declarations() {\n/** @type {?} */\nEqualValidator.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nEqualValidator.ctorParameters;\n/** @type {?} */\nEqualValidator.propDecorators;\n/** @type {?} */\nEqualValidator.prototype.equal;\n/** @type {?} */\nEqualValidator.prototype.validator;\n/** @type {?} */\nEqualValidator.prototype.onChange;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, Input, forwardRef, OnInit } from '@angular/core';\nimport { NG_VALIDATORS, Validator, FormControl, ValidatorFn, AbstractControl } from '@angular/forms';\n\nimport { equalTo } from './validator';\n\nconst /** @type {?} */ EQUAL_TO_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => EqualToValidator),\n  multi: true\n};\nexport class EqualToValidator implements Validator, OnInit {\n   equalTo: FormControl;\nprivate validator: ValidatorFn;\n/**\n * @return {?}\n */\nngOnInit() {\n    this.validator = equalTo(this.equalTo);\n  }\n/**\n * @param {?} c\n * @return {?}\n */\nvalidate(c: AbstractControl): {[key: string]: any} {\n    return this.validator(c);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[equalTo][formControlName],[equalTo][formControl],[equalTo][ngModel]',\n  providers: [EQUAL_TO_VALIDATOR]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'equalTo': [{ type: Input },],\n};\n}\n\nfunction EqualToValidator_tsickle_Closure_declarations() {\n/** @type {?} */\nEqualToValidator.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nEqualToValidator.ctorParameters;\n/** @type {?} */\nEqualToValidator.propDecorators;\n/** @type {?} */\nEqualToValidator.prototype.equalTo;\n/** @type {?} */\nEqualToValidator.prototype.validator;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, Input, forwardRef, OnInit, OnChanges, SimpleChanges } from '@angular/core';\nimport { NG_VALIDATORS, Validator, ValidatorFn, AbstractControl } from '@angular/forms';\n\nimport { gt } from './validator';\n\nconst /** @type {?} */ GREATER_THAN_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => GreaterThanValidator),\n  multi: true\n};\nexport class GreaterThanValidator implements Validator, OnInit, OnChanges {\n   gt: number;\nprivate validator: ValidatorFn;\nprivate onChange: () => void;\n/**\n * @return {?}\n */\nngOnInit() {\n    this.validator = gt(this.gt);\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    for (const /** @type {?} */ key in changes) {\n      if (key === 'gt') {\n        this.validator = gt(changes[key].currentValue);\n        if (this.onChange) {\n          this.onChange();\n        }\n      }\n    }\n  }\n/**\n * @param {?} c\n * @return {?}\n */\nvalidate(c: AbstractControl): {[key: string]: any} {\n    return this.validator(c);\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnValidatorChange(fn: () => void): void {\n    this.onChange = fn;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[gt][formControlName],[gt][formControl],[gt][ngModel]',\n  providers: [GREATER_THAN_VALIDATOR]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'gt': [{ type: Input },],\n};\n}\n\nfunction GreaterThanValidator_tsickle_Closure_declarations() {\n/** @type {?} */\nGreaterThanValidator.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nGreaterThanValidator.ctorParameters;\n/** @type {?} */\nGreaterThanValidator.propDecorators;\n/** @type {?} */\nGreaterThanValidator.prototype.gt;\n/** @type {?} */\nGreaterThanValidator.prototype.validator;\n/** @type {?} */\nGreaterThanValidator.prototype.onChange;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, Input, forwardRef, OnInit, OnChanges, SimpleChanges } from '@angular/core';\nimport { NG_VALIDATORS, Validator, ValidatorFn, AbstractControl } from '@angular/forms';\n\nimport { gte } from './validator';\n\nconst /** @type {?} */ GREATER_THAN_EQUAL_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => GreaterThanEqualValidator),\n  multi: true\n};\nexport class GreaterThanEqualValidator implements Validator, OnInit, OnChanges {\n   gte: number;\nprivate validator: ValidatorFn;\nprivate onChange: () => void;\n/**\n * @return {?}\n */\nngOnInit() {\n    this.validator = gte(this.gte);\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    for (const /** @type {?} */ key in changes) {\n      if (key === 'gte') {\n        this.validator = gte(changes[key].currentValue);\n        if (this.onChange) {\n          this.onChange();\n        }\n      }\n    }\n  }\n/**\n * @param {?} c\n * @return {?}\n */\nvalidate(c: AbstractControl): {[key: string]: any} {\n    return this.validator(c);\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnValidatorChange(fn: () => void): void {\n    this.onChange = fn;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[gte][formControlName],[gte][formControl],[gte][ngModel]',\n  providers: [GREATER_THAN_EQUAL_VALIDATOR]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'gte': [{ type: Input },],\n};\n}\n\nfunction GreaterThanEqualValidator_tsickle_Closure_declarations() {\n/** @type {?} */\nGreaterThanEqualValidator.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nGreaterThanEqualValidator.ctorParameters;\n/** @type {?} */\nGreaterThanEqualValidator.propDecorators;\n/** @type {?} */\nGreaterThanEqualValidator.prototype.gte;\n/** @type {?} */\nGreaterThanEqualValidator.prototype.validator;\n/** @type {?} */\nGreaterThanEqualValidator.prototype.onChange;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, forwardRef } from '@angular/core';\nimport { NG_VALIDATORS, Validator, AbstractControl } from '@angular/forms';\n\nimport { json } from './validator';\n\nconst /** @type {?} */ JSON_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => JSONValidator),\n  multi: true\n};\nexport class JSONValidator implements Validator {\n/**\n * @param {?} c\n * @return {?}\n */\nvalidate(c: AbstractControl): {[key: string]: any} {\n    return json(c);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[json][formControlName],[json][formControl],[json][ngModel]',\n  providers: [JSON_VALIDATOR]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction JSONValidator_tsickle_Closure_declarations() {\n/** @type {?} */\nJSONValidator.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nJSONValidator.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, Input, forwardRef, OnInit, OnChanges, SimpleChanges } from '@angular/core';\nimport { NG_VALIDATORS, Validator, ValidatorFn, AbstractControl } from '@angular/forms';\n\nimport { lt } from './validator';\n\nconst /** @type {?} */ LESS_THAN_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => LessThanValidator),\n  multi: true\n};\nexport class LessThanValidator implements Validator, OnInit, OnChanges {\n   lt: number;\nprivate validator: ValidatorFn;\nprivate onChange: () => void;\n/**\n * @return {?}\n */\nngOnInit() {\n    this.validator = lt(this.lt);\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    for (const /** @type {?} */ key in changes) {\n      if (key === 'lt') {\n        this.validator = lt(changes[key].currentValue);\n        if (this.onChange) {\n          this.onChange();\n        }\n      }\n    }\n  }\n/**\n * @param {?} c\n * @return {?}\n */\nvalidate(c: AbstractControl): {[key: string]: any} {\n    return this.validator(c);\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnValidatorChange(fn: () => void): void {\n    this.onChange = fn;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[lt][formControlName],[lt][formControl],[lt][ngModel]',\n  providers: [LESS_THAN_VALIDATOR]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'lt': [{ type: Input },],\n};\n}\n\nfunction LessThanValidator_tsickle_Closure_declarations() {\n/** @type {?} */\nLessThanValidator.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLessThanValidator.ctorParameters;\n/** @type {?} */\nLessThanValidator.propDecorators;\n/** @type {?} */\nLessThanValidator.prototype.lt;\n/** @type {?} */\nLessThanValidator.prototype.validator;\n/** @type {?} */\nLessThanValidator.prototype.onChange;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, Input, forwardRef, OnInit, OnChanges, SimpleChanges } from '@angular/core';\nimport { NG_VALIDATORS, Validator, ValidatorFn, AbstractControl } from '@angular/forms';\n\nimport { lte } from './validator';\n\nconst /** @type {?} */ LESS_THAN_EQUAL_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => LessThanEqualValidator),\n  multi: true\n};\nexport class LessThanEqualValidator implements Validator, OnInit, OnChanges {\n   lte: number;\nprivate validator: ValidatorFn;\nprivate onChange: () => void;\n/**\n * @return {?}\n */\nngOnInit() {\n    this.validator = lte(this.lte);\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    for (const /** @type {?} */ key in changes) {\n      if (key === 'lte') {\n        this.validator = lte(changes[key].currentValue);\n        if (this.onChange) {\n          this.onChange();\n        }\n      }\n    }\n  }\n/**\n * @param {?} c\n * @return {?}\n */\nvalidate(c: AbstractControl): {[key: string]: any} {\n    return this.validator(c);\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnValidatorChange(fn: () => void): void {\n    this.onChange = fn;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[lte][formControlName],[lte][formControl],[lte][ngModel]',\n  providers: [LESS_THAN_EQUAL_VALIDATOR]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'lte': [{ type: Input },],\n};\n}\n\nfunction LessThanEqualValidator_tsickle_Closure_declarations() {\n/** @type {?} */\nLessThanEqualValidator.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLessThanEqualValidator.ctorParameters;\n/** @type {?} */\nLessThanEqualValidator.propDecorators;\n/** @type {?} */\nLessThanEqualValidator.prototype.lte;\n/** @type {?} */\nLessThanEqualValidator.prototype.validator;\n/** @type {?} */\nLessThanEqualValidator.prototype.onChange;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, Input, forwardRef, OnInit, OnChanges, SimpleChanges } from '@angular/core';\nimport { NG_VALIDATORS, Validator, ValidatorFn, AbstractControl } from '@angular/forms';\n\nimport { max } from './validator';\n\nconst /** @type {?} */ MAX_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MaxValidator),\n  multi: true\n};\nexport class MaxValidator implements Validator, OnInit, OnChanges {\n   max: number;\nprivate validator: ValidatorFn;\nprivate onChange: () => void;\n/**\n * @return {?}\n */\nngOnInit() {\n    this.validator = max(this.max);\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    for (const /** @type {?} */ key in changes) {\n      if (key === 'max') {\n        this.validator = max(changes[key].currentValue);\n        if (this.onChange) {\n          this.onChange();\n        }\n      }\n    }\n  }\n/**\n * @param {?} c\n * @return {?}\n */\nvalidate(c: AbstractControl): {[key: string]: any} {\n    return this.validator(c);\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnValidatorChange(fn: () => void): void {\n    this.onChange = fn;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[max][formControlName],[max][formControl],[max][ngModel]',\n  providers: [MAX_VALIDATOR]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'max': [{ type: Input },],\n};\n}\n\nfunction MaxValidator_tsickle_Closure_declarations() {\n/** @type {?} */\nMaxValidator.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMaxValidator.ctorParameters;\n/** @type {?} */\nMaxValidator.propDecorators;\n/** @type {?} */\nMaxValidator.prototype.max;\n/** @type {?} */\nMaxValidator.prototype.validator;\n/** @type {?} */\nMaxValidator.prototype.onChange;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, Input, forwardRef, OnInit, OnChanges, SimpleChanges } from '@angular/core';\nimport { NG_VALIDATORS, Validator, ValidatorFn, AbstractControl } from '@angular/forms';\n\nimport { maxDate } from './validator';\n\nconst /** @type {?} */ MAX_DATE_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MaxDateValidator),\n  multi: true\n};\nexport class MaxDateValidator implements Validator, OnInit, OnChanges {\n   maxDate;\nprivate validator: ValidatorFn;\nprivate onChange: () => void;\n/**\n * @return {?}\n */\nngOnInit() {\n    this.validator = maxDate(this.maxDate);\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    for (const /** @type {?} */ key in changes) {\n      if (key === 'maxDate') {\n        this.validator = maxDate(changes[key].currentValue);\n        if (this.onChange) {\n          this.onChange();\n        }\n      }\n    }\n  }\n/**\n * @param {?} c\n * @return {?}\n */\nvalidate(c: AbstractControl): {[key: string]: any} {\n    return this.validator(c);\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnValidatorChange(fn: () => void): void {\n    this.onChange = fn;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[maxDate][formControlName],[maxDate][formControl],[maxDate][ngModel]',\n  providers: [MAX_DATE_VALIDATOR]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'maxDate': [{ type: Input },],\n};\n}\n\nfunction MaxDateValidator_tsickle_Closure_declarations() {\n/** @type {?} */\nMaxDateValidator.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMaxDateValidator.ctorParameters;\n/** @type {?} */\nMaxDateValidator.propDecorators;\n/** @type {?} */\nMaxDateValidator.prototype.maxDate;\n/** @type {?} */\nMaxDateValidator.prototype.validator;\n/** @type {?} */\nMaxDateValidator.prototype.onChange;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, Input, forwardRef, OnInit, OnChanges, SimpleChanges } from '@angular/core';\nimport { NG_VALIDATORS, Validator, ValidatorFn, AbstractControl } from '@angular/forms';\n\nimport { min } from './validator';\n\nconst /** @type {?} */ MIN_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MinValidator),\n  multi: true\n};\nexport class MinValidator implements Validator, OnInit, OnChanges {\n   min: number;\nprivate validator: ValidatorFn;\nprivate onChange: () => void;\n/**\n * @return {?}\n */\nngOnInit() {\n    this.validator = min(this.min);\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    for (const /** @type {?} */ key in changes) {\n      if (key === 'min') {\n        this.validator = min(changes[key].currentValue);\n        if (this.onChange) {\n          this.onChange();\n        }\n      }\n    }\n  }\n/**\n * @param {?} c\n * @return {?}\n */\nvalidate(c: AbstractControl): {[key: string]: any} {\n    return this.validator(c);\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnValidatorChange(fn: () => void): void {\n    this.onChange = fn;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[min][formControlName],[min][formControl],[min][ngModel]',\n  providers: [MIN_VALIDATOR]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'min': [{ type: Input },],\n};\n}\n\nfunction MinValidator_tsickle_Closure_declarations() {\n/** @type {?} */\nMinValidator.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMinValidator.ctorParameters;\n/** @type {?} */\nMinValidator.propDecorators;\n/** @type {?} */\nMinValidator.prototype.min;\n/** @type {?} */\nMinValidator.prototype.validator;\n/** @type {?} */\nMinValidator.prototype.onChange;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, Input, forwardRef, OnInit, OnChanges, SimpleChanges } from '@angular/core';\nimport { NG_VALIDATORS, Validator, ValidatorFn, AbstractControl } from '@angular/forms';\n\nimport { minDate } from './validator';\n\nconst /** @type {?} */ MIN_DATE_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MinDateValidator),\n  multi: true\n};\nexport class MinDateValidator implements Validator, OnInit, OnChanges {\n   minDate;\nprivate validator: ValidatorFn;\nprivate onChange: () => void;\n/**\n * @return {?}\n */\nngOnInit() {\n    this.validator = minDate(this.minDate);\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    for (const /** @type {?} */ key in changes) {\n      if (key === 'minDate') {\n        this.validator = minDate(changes[key].currentValue);\n        if (this.onChange) {\n          this.onChange();\n        }\n      }\n    }\n  }\n/**\n * @param {?} c\n * @return {?}\n */\nvalidate(c: AbstractControl): {[key: string]: any} {\n    return this.validator(c);\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnValidatorChange(fn: () => void): void {\n    this.onChange = fn;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[minDate][formControlName],[minDate][formControl],[minDate][ngModel]',\n  providers: [MIN_DATE_VALIDATOR]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'minDate': [{ type: Input },],\n};\n}\n\nfunction MinDateValidator_tsickle_Closure_declarations() {\n/** @type {?} */\nMinDateValidator.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMinDateValidator.ctorParameters;\n/** @type {?} */\nMinDateValidator.propDecorators;\n/** @type {?} */\nMinDateValidator.prototype.minDate;\n/** @type {?} */\nMinDateValidator.prototype.validator;\n/** @type {?} */\nMinDateValidator.prototype.onChange;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, Input, forwardRef, OnInit, SimpleChanges, OnChanges } from '@angular/core';\nimport { NG_VALIDATORS, Validator, ValidatorFn, AbstractControl } from '@angular/forms';\n\nimport { notEqual } from './validator';\n\nconst /** @type {?} */ NOT_EQUAL_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => NotEqualValidator),\n  multi: true\n};\nexport class NotEqualValidator implements Validator, OnInit, OnChanges {\n   notEqual: any;\nprivate validator: ValidatorFn;\nprivate onChange: () => void;\n/**\n * @return {?}\n */\nngOnInit() {\n    this.validator = notEqual(this.notEqual);\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    for (const /** @type {?} */ key in changes) {\n      if (key === 'notEqual') {\n        this.validator = notEqual(changes[key].currentValue);\n        if (this.onChange) {\n          this.onChange();\n        }\n      }\n    }\n  }\n/**\n * @param {?} c\n * @return {?}\n */\nvalidate(c: AbstractControl): {[key: string]: any} {\n    return this.validator(c);\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnValidatorChange(fn: () => void): void {\n    this.onChange = fn;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[notEqual][formControlName],[notEqual][formControl],[notEqual][ngModel]',\n  providers: [NOT_EQUAL_VALIDATOR]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'notEqual': [{ type: Input },],\n};\n}\n\nfunction NotEqualValidator_tsickle_Closure_declarations() {\n/** @type {?} */\nNotEqualValidator.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNotEqualValidator.ctorParameters;\n/** @type {?} */\nNotEqualValidator.propDecorators;\n/** @type {?} */\nNotEqualValidator.prototype.notEqual;\n/** @type {?} */\nNotEqualValidator.prototype.validator;\n/** @type {?} */\nNotEqualValidator.prototype.onChange;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, Input, forwardRef, OnInit } from '@angular/core';\nimport { NG_VALIDATORS, Validator, FormControl, ValidatorFn, AbstractControl } from '@angular/forms';\n\nimport { notEqualTo } from './validator';\n\nconst /** @type {?} */ NOT_EQUAL_TO_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => NotEqualToValidator),\n  multi: true\n};\nexport class NotEqualToValidator implements Validator, OnInit {\n   notEqualTo: FormControl;\nprivate validator: ValidatorFn;\n/**\n * @return {?}\n */\nngOnInit() {\n    this.validator = notEqualTo(this.notEqualTo);\n  }\n/**\n * @param {?} c\n * @return {?}\n */\nvalidate(c: AbstractControl): {[key: string]: any} {\n    return this.validator(c);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[notEqualTo][formControlName],[notEqualTo][formControl],[notEqualTo][ngModel]',\n  providers: [NOT_EQUAL_TO_VALIDATOR]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'notEqualTo': [{ type: Input },],\n};\n}\n\nfunction NotEqualToValidator_tsickle_Closure_declarations() {\n/** @type {?} */\nNotEqualToValidator.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNotEqualToValidator.ctorParameters;\n/** @type {?} */\nNotEqualToValidator.propDecorators;\n/** @type {?} */\nNotEqualToValidator.prototype.notEqualTo;\n/** @type {?} */\nNotEqualToValidator.prototype.validator;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, forwardRef } from '@angular/core';\nimport { NG_VALIDATORS, Validator, AbstractControl } from '@angular/forms';\n\nimport { number } from './validator';\n\nconst /** @type {?} */ NUMBER_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => NumberValidator),\n  multi: true\n};\nexport class NumberValidator implements Validator {\n/**\n * @param {?} c\n * @return {?}\n */\nvalidate(c: AbstractControl): {[key: string]: any} {\n    return number(c);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[number][formControlName],[number][formControl],[number][ngModel]',\n  providers: [NUMBER_VALIDATOR]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NumberValidator_tsickle_Closure_declarations() {\n/** @type {?} */\nNumberValidator.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNumberValidator.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, Input, forwardRef, OnInit, OnChanges, SimpleChanges } from '@angular/core';\nimport { NG_VALIDATORS, Validator, ValidatorFn, AbstractControl } from '@angular/forms';\n\nimport { property } from './validator';\n\nconst /** @type {?} */ PROPERTY_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => PropertyValidator),\n  multi: true\n};\nexport class PropertyValidator implements Validator, OnInit, OnChanges {\n   property: string;\nprivate validator: ValidatorFn;\nprivate onChange: () => void;\n/**\n * @return {?}\n */\nngOnInit() {\n    this.validator = property(this.property);\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    for (const /** @type {?} */ key in changes) {\n      if (key === 'property') {\n        this.validator = property(changes[key].currentValue);\n        if (this.onChange) {\n          this.onChange();\n        }\n      }\n    }\n  }\n/**\n * @param {?} c\n * @return {?}\n */\nvalidate(c: AbstractControl): {[key: string]: any} {\n    return this.validator(c);\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnValidatorChange(fn: () => void): void {\n    this.onChange = fn;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[property][formControlName],[property][formControl],[property][ngModel]',\n  providers: [PROPERTY_VALIDATOR]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'property': [{ type: Input },],\n};\n}\n\nfunction PropertyValidator_tsickle_Closure_declarations() {\n/** @type {?} */\nPropertyValidator.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPropertyValidator.ctorParameters;\n/** @type {?} */\nPropertyValidator.propDecorators;\n/** @type {?} */\nPropertyValidator.prototype.property;\n/** @type {?} */\nPropertyValidator.prototype.validator;\n/** @type {?} */\nPropertyValidator.prototype.onChange;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, Input, forwardRef, OnInit, OnChanges, SimpleChanges } from '@angular/core';\nimport { NG_VALIDATORS, Validator, ValidatorFn, AbstractControl } from '@angular/forms';\n\nimport { range } from './validator';\n\nconst /** @type {?} */ RANGE_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => RangeValidator),\n  multi: true\n};\nexport class RangeValidator implements Validator, OnInit, OnChanges {\n   range: [number];\nprivate validator: ValidatorFn;\nprivate onChange: () => void;\n/**\n * @return {?}\n */\nngOnInit() {\n    this.validator = range(this.range);\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    for (const /** @type {?} */ key in changes) {\n      if (key === 'range') {\n        this.validator = range(changes[key].currentValue);\n        if (this.onChange) {\n          this.onChange();\n        }\n      }\n    }\n  }\n/**\n * @param {?} c\n * @return {?}\n */\nvalidate(c: AbstractControl): {[key: string]: any} {\n    return this.validator(c);\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnValidatorChange(fn: () => void): void {\n    this.onChange = fn;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[range][formControlName],[range][formControl],[range][ngModel]',\n  providers: [RANGE_VALIDATOR]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'range': [{ type: Input },],\n};\n}\n\nfunction RangeValidator_tsickle_Closure_declarations() {\n/** @type {?} */\nRangeValidator.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRangeValidator.ctorParameters;\n/** @type {?} */\nRangeValidator.propDecorators;\n/** @type {?} */\nRangeValidator.prototype.range;\n/** @type {?} */\nRangeValidator.prototype.validator;\n/** @type {?} */\nRangeValidator.prototype.onChange;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, Input, forwardRef, OnInit, OnChanges, SimpleChanges } from '@angular/core';\nimport { NG_VALIDATORS, Validator, ValidatorFn, AbstractControl } from '@angular/forms';\n\nimport { rangeLength } from './validator';\n\nconst /** @type {?} */ RANGE_LENGTH_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => RangeLengthValidator),\n  multi: true\n};\nexport class RangeLengthValidator implements Validator, OnInit, OnChanges {\n   rangeLength: [number];\nprivate validator: ValidatorFn;\nprivate onChange: () => void;\n/**\n * @return {?}\n */\nngOnInit() {\n    this.validator = rangeLength(this.rangeLength);\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    for (const /** @type {?} */ key in changes) {\n      if (key === 'rangeLength') {\n        this.validator = rangeLength(changes[key].currentValue);\n        if (this.onChange) {\n          this.onChange();\n        }\n      }\n    }\n  }\n/**\n * @param {?} c\n * @return {?}\n */\nvalidate(c: AbstractControl): {[key: string]: any} {\n    return this.validator(c);\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnValidatorChange(fn: () => void): void {\n    this.onChange = fn;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[rangeLength][formControlName],[rangeLength][formControl],[rangeLength][ngModel]',\n  providers: [RANGE_LENGTH_VALIDATOR]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'rangeLength': [{ type: Input },],\n};\n}\n\nfunction RangeLengthValidator_tsickle_Closure_declarations() {\n/** @type {?} */\nRangeLengthValidator.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRangeLengthValidator.ctorParameters;\n/** @type {?} */\nRangeLengthValidator.propDecorators;\n/** @type {?} */\nRangeLengthValidator.prototype.rangeLength;\n/** @type {?} */\nRangeLengthValidator.prototype.validator;\n/** @type {?} */\nRangeLengthValidator.prototype.onChange;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, forwardRef } from '@angular/core';\nimport { NG_VALIDATORS, Validator, AbstractControl } from '@angular/forms';\n\nimport { url } from './validator';\n\nconst /** @type {?} */ URL_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => UrlValidator),\n  multi: true\n};\nexport class UrlValidator implements Validator {\n/**\n * @param {?} c\n * @return {?}\n */\nvalidate(c: AbstractControl): {[key: string]: any} {\n    return url(c);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[url][formControlName],[url][formControl],[url][ngModel]',\n  providers: [URL_VALIDATOR]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction UrlValidator_tsickle_Closure_declarations() {\n/** @type {?} */\nUrlValidator.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nUrlValidator.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, Input, forwardRef, OnInit, OnChanges, SimpleChanges } from '@angular/core';\nimport { NG_VALIDATORS, Validator, ValidatorFn, AbstractControl } from '@angular/forms';\n\nimport { uuid } from './validator';\n\nconst /** @type {?} */ UUID_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => UUIDValidator),\n  multi: true\n};\nexport class UUIDValidator implements Validator, OnInit, OnChanges {\n   uuid;\nprivate validator: ValidatorFn;\nprivate onChange: () => void;\n/**\n * @return {?}\n */\nngOnInit() {\n    this.validator = uuid(this.uuid);\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    for (const /** @type {?} */ key in changes) {\n      if (key === 'uuid') {\n        this.validator = uuid(changes[key].currentValue);\n        if (this.onChange) {\n          this.onChange();\n        }\n      }\n    }\n  }\n/**\n * @param {?} c\n * @return {?}\n */\nvalidate(c: AbstractControl): {[key: string]: any} {\n    return this.validator(c);\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnValidatorChange(fn: () => void): void {\n    this.onChange = fn;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[uuid][formControlName],[uuid][formControl],[uuid][ngModel]',\n  providers: [UUID_VALIDATOR]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'uuid': [{ type: Input },],\n};\n}\n\nfunction UUIDValidator_tsickle_Closure_declarations() {\n/** @type {?} */\nUUIDValidator.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nUUIDValidator.ctorParameters;\n/** @type {?} */\nUUIDValidator.propDecorators;\n/** @type {?} */\nUUIDValidator.prototype.uuid;\n/** @type {?} */\nUUIDValidator.prototype.validator;\n/** @type {?} */\nUUIDValidator.prototype.onChange;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { AbstractControl, ValidatorFn } from '@angular/forms';\nimport { NgModule } from '@angular/core';\nimport { arrayLength } from './array-length/validator';\nimport { base64 } from './base64/validator';\nimport { creditCard } from './credit-card/validator';\nimport { date } from './date/validator';\nimport { dateISO } from './date-ios/validator';\nimport { digits } from './digits/validator';\nimport { email } from './email/validator';\nimport { equal } from './equal/validator';\nimport { equalTo } from './equal-to/validator';\nimport { gt } from './greater-than/validator';\nimport { gte } from './greater-than-equal/validator';\nimport { json } from './json/validator';\nimport { lt } from './less-than/validator';\nimport { lte } from './less-than-equal/validator';\nimport { max } from './max/validator';\nimport { maxDate } from './max-date/validator';\nimport { min } from './min/validator';\nimport { minDate } from './min-date/validator';\nimport { notEqual } from './not-equal/validator';\nimport { notEqualTo } from './not-equal-to/validator';\nimport { number } from './number/validator';\nimport { property } from './property/validator';\nimport { range } from './range/validator';\nimport { rangeLength } from './range-length/validator';\nimport { uuid } from './uuid/validator';\nimport { url } from './url/validator';\n\nimport { ArrayLengthValidator } from './array-length/directive';\nimport { Base64Validator } from './base64/directive';\nimport { CreditCardValidator } from './credit-card/directive';\nimport { DateValidator } from './date/directive';\nimport { DateISOValidator } from './date-ios/directive';\nimport { DigitsValidator } from './digits/directive';\nimport { EmailValidator } from './email/directive';\nimport { EqualValidator } from './equal/directive';\nimport { EqualToValidator } from './equal-to/directive';\nimport { GreaterThanValidator } from './greater-than/directive';\nimport { GreaterThanEqualValidator } from './greater-than-equal/directive';\nimport { JSONValidator } from './json/directive';\nimport { LessThanValidator } from './less-than/directive';\nimport { LessThanEqualValidator } from './less-than-equal/directive';\nimport { MaxValidator } from './max/directive';\nimport { MaxDateValidator } from './max-date/directive';\nimport { MinValidator } from './min/directive';\nimport { MinDateValidator } from './min-date/directive';\nimport { NotEqualValidator } from './not-equal/directive';\nimport { NotEqualToValidator } from './not-equal-to/directive';\nimport { NumberValidator } from './number/directive';\nimport { PropertyValidator } from './property/directive';\nimport { RangeValidator } from './range/directive';\nimport { RangeLengthValidator } from './range-length/directive';\nimport { UrlValidator } from './url/directive';\nimport { UUIDValidator } from './uuid/directive';\n\nexport const /** @type {?} */ CustomValidators = {\n  arrayLength,\n  base64,\n  creditCard,\n  date,\n  dateISO,\n  digits,\n  email,\n  equal,\n  equalTo,\n  gt,\n  gte,\n  json,\n  lt,\n  lte,\n  max,\n  maxDate,\n  min,\n  minDate,\n  notEqual,\n  notEqualTo,\n  number,\n  property,\n  range,\n  rangeLength,\n  url,\n  uuid\n};\n\nconst /** @type {?} */ CustomDirectives = [\n  ArrayLengthValidator,\n  Base64Validator,\n  CreditCardValidator,\n  DateValidator,\n  DateISOValidator,\n  DigitsValidator,\n  EmailValidator,\n  EqualValidator,\n  EqualToValidator,\n  GreaterThanValidator,\n  GreaterThanEqualValidator,\n  JSONValidator,\n  LessThanValidator,\n  LessThanEqualValidator,\n  MaxValidator,\n  MaxDateValidator,\n  MinValidator,\n  MinDateValidator,\n  NotEqualValidator,\n  NotEqualToValidator,\n  NumberValidator,\n  PropertyValidator,\n  RangeValidator,\n  RangeLengthValidator,\n  UrlValidator,\n  UUIDValidator\n];\nexport class CustomFormsModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [CustomDirectives],\n  exports: [CustomDirectives]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CustomFormsModule_tsickle_Closure_declarations() {\n/** @type {?} */\nCustomFormsModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCustomFormsModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["isPresent","obj","undefined","isDate","test","Date","toString","parseDate","year","month","day","arrayLength","value","control","Validators","required","Array","isArray","length","base64","v","creditCard","sanitized","replace","digit","tmpNum","shouldDouble","sum","i","substring","parseInt","Boolean","date","dateISO","digits","email","equal","val","equalTo","equalControl","subscribe","valueChanges","updateValueAndValidity","gt","gte","json","JSON","parse","e","lt","lte","max","actualValue","requiredValue","maxDate","Function","Error","d","getTime","min","minDate","notEqual","notEqualTo","notEqualControl","number","property","properties","split","isValid","_i","properties_1","hasProperty","range","rangeLength","uuids","3","4","5","all","uuid","version","pattern","RegExp","url","ARRAY_LENGTH_VALIDATOR","provide","NG_VALIDATORS","useExisting","forwardRef","ArrayLengthValidator","multi","prototype","ngOnInit","this","validator","ngOnChanges","changes","key","currentValue","onChange","validate","c","registerOnValidatorChange","fn","decorators","type","Directive","args","selector","providers","ctorParameters","propDecorators","Input","BASE64_VALIDATOR","Base64Validator","CREDIT_CARD_VALIDATOR","CreditCardValidator","DATE_VALIDATOR","DateValidator","DATE_ISO_VALIDATOR","DateISOValidator","DIGITS_VALIDATOR","DigitsValidator","EMAIL_VALIDATOR","EmailValidator","EQUAL_VALIDATOR","EqualValidator","EQUAL_TO_VALIDATOR","EqualToValidator","GREATER_THAN_VALIDATOR","GreaterThanValidator","GREATER_THAN_EQUAL_VALIDATOR","GreaterThanEqualValidator","JSON_VALIDATOR","JSONValidator","LESS_THAN_VALIDATOR","LessThanValidator","LESS_THAN_EQUAL_VALIDATOR","LessThanEqualValidator","MAX_VALIDATOR","MaxValidator","MAX_DATE_VALIDATOR","MaxDateValidator","MIN_VALIDATOR","MinValidator","MIN_DATE_VALIDATOR","MinDateValidator","NOT_EQUAL_VALIDATOR","NotEqualValidator","NOT_EQUAL_TO_VALIDATOR","NotEqualToValidator","NUMBER_VALIDATOR","NumberValidator","PROPERTY_VALIDATOR","PropertyValidator","RANGE_VALIDATOR","RangeValidator","RANGE_LENGTH_VALIDATOR","RangeLengthValidator","URL_VALIDATOR","UrlValidator","UUID_VALIDATOR","UUIDValidator","CustomValidators","CustomDirectives","CustomFormsModule","NgModule","declarations","exports"],"mappings":"iTAKA,SAAAA,EALCC,GAMC,OALOA,IAAQC,WAAqB,OAARD,EAW9B,SAAAE,EARCF,GASC,OARO,cAAeG,KAAK,IAAIC,KAAKJ,GAAKK,YAc3C,SAAAC,EAXCN,GAYC,MAXmB,iBAARA,GAAgC,MAAZA,EAAIO,MAA6B,MAAbP,EAAIQ,OAA4B,MAAXR,EAAIS,IACnET,EAAIO,KAAO,IAAMP,EAAIQ,MAAQ,IAAMR,EAAIS,IAEzCT,ECRF,IAAMU,EAAc,SAAAC,GACzB,OAAO,SAAAC,GAEL,GAAIb,EAAUc,EAAAA,WAAWC,SAASF,IAChC,OAAO,KAGT,IAAMZ,EAAMY,EAAQD,MACpB,OAAOI,MAAMC,QAAQhB,IAAQA,EAAIiB,SAAUN,EAAS,MAASD,aAAaC,KCRjEO,EAAsB,SAAAN,GACjC,GAAIb,EAAUc,EAAAA,WAAWC,SAASF,IAChC,OAAO,KAGT,IAAMO,EAAYP,EAAQD,MAC1B,MAAO,4EAA4ER,KAAKgB,GAAK,MAAOD,QAAW,ICNpGE,EAA0B,SAAAR,GACrC,GAAIb,EAAUc,EAAAA,WAAWC,SAASF,IAChC,OAAO,KAGT,IAEMS,EAFYT,EAAQD,MAENW,QAAQ,WAAY,IAIxC,IAAM,wJAAwJnB,KAAKkB,GACjK,OAAOD,YAAa,GAQtB,IAAK,IAHDG,EACAC,EACAC,EAHAC,EAAM,EAIDC,EAAIN,EAAUJ,OAAS,EAAGU,GAAK,EAAGA,IACzCJ,EAAQF,EAAUO,UAAUD,EAAGA,EAAK,GACpCH,EAASK,SAASN,EAAO,IAIrBG,GAHAD,IACFD,GAAU,IACI,GACHA,EAAS,GAAM,EAKnBA,EAETC,GAAeA,EAGjB,OAAIK,QAASJ,EAAM,IAAQ,GAAIL,GACtB,MAGFD,YAAa,ICxCTW,EAAoB,SAAAnB,GAC/B,OAAIb,EAAUc,EAAAA,WAAWC,SAASF,IACzB,KAIFV,EADWU,EAAQD,OACP,MAAOoB,MAAO,ICNtBC,EAAuB,SAAApB,GAClC,GAAIb,EAAUc,EAAAA,WAAWC,SAASF,IAChC,OAAO,KAGT,IAAMO,EAAYP,EAAQD,MAC1B,MAAO,+DAA+DR,KAAKgB,GAAK,MAAOa,SAAU,ICNtFC,EAAsB,SAAArB,GACjC,GAAIb,EAAUc,EAAAA,WAAWC,SAASF,IAChC,OAAO,KAGT,IAAMO,EAAYP,EAAQD,MAC1B,MAAO,QAAQR,KAAKgB,GAAK,MAAOc,QAAS,ICN9BC,EAAqB,SAAAtB,GAChC,GAAIb,EAAUc,EAAAA,WAAWC,SAASF,IAChC,OAAO,KAGT,IAAMO,EAAYP,EAAQD,MAE1B,MAAO,yJAAyJR,KAAKgB,GAAK,MAAOe,OAAU,ICPhLC,EAAQ,SAAAC,GACnB,OAAO,SAAAxB,GACL,GAAIb,EAAUc,EAAAA,WAAWC,SAASF,IAChC,OAAO,KAGT,IAAMO,EAASP,EAAQD,MAEvB,OAAOyB,IAAQjB,EAAI,MAAOgB,OAAQ,KCVzBE,EAAU,SAAAC,GACrB,IAAIC,GAAY,EAEhB,OAAO,SAAA3B,GACA2B,IACHA,GAAY,EACZD,EAAaE,aAAaD,UAAU,WAClC3B,EAAQ6B,4BAIZ,IAAMtB,EAAYP,EAAQD,MAE1B,OAAO2B,EAAa3B,QAAUQ,EAAI,MAAOkB,SAAU,KCX1CK,EAAK,SAAA/B,GAChB,OAAO,SAAAC,GACL,OAAKb,EAAUY,GAGXZ,EAAUc,EAAAA,WAAWC,SAASF,IACzB,MAGSA,EAASD,OAChBA,EAAS,MAAO+B,IAAK,GAPvB,OCHAC,EAAM,SAAAhC,GACjB,OAAO,SAAAC,GACL,OAAKb,EAAUY,GAGXZ,EAAUc,EAAAA,WAAWC,SAASF,IACzB,MAGSA,EAASD,QACfA,EAAS,MAAOgC,KAAM,GAPzB,OCHAC,EAAoB,SAAAhC,GAC/B,GAAIb,EAAUc,EAAAA,WAAWC,SAASF,IAChC,OAAO,KAGT,IAAMO,EAAYP,EAAQD,MAE1B,IACE,IAAMX,EAAM6C,KAAKC,MAAM3B,GAEvB,GAAIW,QAAQ9B,IAAuB,iBAARA,EACzB,OAAO,KAET,MAAA+C,IACF,OAAOH,MAAO,ICdHI,EAAK,SAAArC,GAChB,OAAO,SAAAC,GACL,OAAKb,EAAUY,GAGXZ,EAAUc,EAAAA,WAAWC,SAASF,IACzB,MAGSA,EAASD,OAChBA,EAAS,MAAOqC,IAAK,GAPvB,OCHAC,EAAM,SAAAtC,GACjB,OAAO,SAAAC,GACL,OAAKb,EAAUY,GAGXZ,EAAUc,EAAAA,WAAWC,SAASF,IACzB,MAGSA,EAASD,QACfA,EAAS,MAAOsC,KAAM,GAPzB,OCHAC,EAAM,SAAAvC,GACjB,OAAO,SAAAC,GACL,IAAKb,EAAUY,GACb,OAAO,KAET,GAAIZ,EAAUc,EAAAA,WAAWC,SAASF,IAChC,OAAO,KAGT,IAAMO,GAAYP,EAASD,MAC3B,OAAOQ,IAAKR,EAAS,MAAOwC,YAAchC,EAAGiC,eAAezC,EAAQuC,KAAK,KCXhEG,EAAU,SAAA1C,GAIrB,GAFAA,EAAQL,EAAUK,KAEbT,EAAOS,IAAYA,aAAiB2C,UACvC,MAAMC,MAAM,oDAGd,OAAO,SAAA3C,GACL,GAAIb,EAAUc,EAAAA,WAAWC,SAASF,IAChC,OAAO,KAGT,IAAM4C,EAAI,IAAIpD,KAAKQ,EAAQD,OAAO8C,UAElC,OAAKvD,EAAOsD,IAGR7C,aAAiB2C,WACnB3C,EAAQA,KAGH6C,GAAK,IAAIpD,KAAKO,GAAO8C,UAAY,MAAOJ,SAAU,KAN9C1C,OAAO,KCfT+C,EAAM,SAAA/C,GACjB,OAAO,SAAAC,GACL,IAAKb,EAAUY,GACb,OAAO,KAET,GAAIZ,EAAUc,EAAAA,WAAWC,SAASF,IAChC,OAAO,KAGT,IAAMO,GAAYP,EAASD,MAC3B,OAAOQ,IAAKR,EAAS,MAAOwC,YAAchC,EAAGiC,eAAezC,EAAQ+C,KAAK,KCVhEC,EAAU,SAAAhD,GAIrB,GAFAA,EAAQL,EAAUK,KAEbT,EAAOS,IAAYA,aAAiB2C,UACvC,MAAMC,MAAM,oDAGd,OAAO,SAAA3C,GACL,GAAIb,EAAUc,EAAAA,WAAWC,SAASF,IAChC,OAAO,KAGT,IAAM4C,EAAI,IAAIpD,KAAKQ,EAAQD,OAAO8C,UAElC,OAAKvD,EAAOsD,IAGR7C,aAAiB2C,WACnB3C,EAAQA,KAGH6C,GAAK,IAAIpD,KAAKO,GAAO8C,UAAY,MAASE,SAAS,KAN/ChD,OAAO,KChBTiD,EAAW,SAAAxB,GACtB,OAAO,SAAAxB,GACL,GAAIb,EAAUc,EAAAA,WAAWC,SAASF,IAChC,OAAO,KAGT,IAAMO,EAASP,EAAQD,MAEvB,OAAOyB,IAAQjB,EAAI,MAAOyC,UAAW,KCV5BC,EAAa,SAAAC,GACxB,IAAIvB,GAAY,EAChB,OAAO,SAAA3B,GACA2B,IACHA,GAAY,EACZuB,EAAgBtB,aAAaD,UAAU,WACrC3B,EAAQ6B,4BAIZ,IAAMtB,EAAYP,EAAQD,MAE1B,OAAOmD,EAAgBnD,QAAUQ,EAAI,MAAO0C,YAAa,KCVhDE,EAAsB,SAAAnD,GACjC,GAAIb,EAAUc,EAAAA,WAAWC,SAASF,IAChC,OAAO,KAGT,IAAMO,EAAYP,EAAQD,MAC1B,MAAO,8CAA8CR,KAAKgB,GAAK,MAAO4C,QAAW,ICNtEC,EAAW,SAAArD,GACtB,OAAO,SAAAC,GAEL,GAAIb,EAAUc,EAAAA,WAAWC,SAASF,IAChC,OAAO,KAOT,IAAmB,IAJbqD,EAAatD,EAAMuD,MAAM,KAEzBlE,EAAMY,EAAQD,MAChBwD,GAAU,EAClBC,EAAA,EAAuBC,EAAvBJ,EAAuBG,EAAvBC,EAAApD,OAAuBmD,IACjB,GAAiB,MAAbpE,EADVqE,EAAAD,IAC6B,CACrBD,GAAU,EACV,MAGJ,OAAOA,EAAU,MAASG,aAAa,EAAMN,SAAUrD,KCjB9C4D,EAAQ,SAAA5D,GACnB,OAAO,SAAAC,GACL,IAAKb,EAAUY,GACb,OAAO,KAET,GAAIZ,EAAUc,EAAAA,WAAWC,SAASF,IAChC,OAAO,KAGT,IAAMO,GAAYP,EAASD,MAC3B,OAAOQ,GAAKR,EAAM,IAAMQ,GAAKR,EAAM,GAAK,MAAOwC,YAAchC,EAAGiC,cAAezC,EAAO4D,OAAO,KCVpFC,EAAc,SAAA7D,GACzB,OAAO,SAAAC,GACL,IAAKb,EAAUY,GACb,OAAO,KAET,GAAIZ,EAAUc,EAAAA,WAAWC,SAASF,IAChC,OAAO,KAGT,IAAMO,EAAYP,EAAQD,MAC1B,OAAOQ,EAAEF,QAAUN,EAAM,IAAMQ,EAAEF,QAAUN,EAAM,GAAK,MAAO6D,aAAc,KCVzEC,GACJC,EAAK,mEACLC,EAAK,yEACLC,EAAK,yEACLC,IAAO,mEAGIC,EAAO,SAAAC,GAClB,OAAO,SAAAnE,GACL,GAAIb,EAAUc,EAAAA,WAAWC,SAASF,IAChC,OAAO,KAGT,IAAMO,EAAYP,EAAQD,MACpBqE,EAAUP,EAAMM,IAAYN,EAAMI,IAExC,OAAO,IAAKI,OAAOD,GAAU7E,KAAKgB,GAAK,MAAO2D,MAAO,KChB5CI,EAAmB,SAAAtE,GAC9B,GAAIb,EAAUc,EAAAA,WAAWC,SAASF,IAChC,OAAO,KAGT,IAAMO,EAAYP,EAAQD,MAE1B,MAAO,2cAA2cR,KAAKgB,GAAK,MAAO+D,KAAQ,ICNveC,GACJC,QAASC,EAAAA,cACTC,YAAaC,EAAAA,WAAW,WAAM,OAAAC,IAC9BC,OAAO,GAETD,EAAA,WAAA,SAAAA,YAOAA,EAAAE,UAAAC,SAAA,WACIC,KACKC,UAAYnF,EAAYkF,KAAKlF,cAKtC8E,EAAAE,UAAAI,YAAA,SAFGC,GAGC,IAAK,IAFMC,KAAOD,EACJ,gBAERC,IACFJ,KAFKC,UAAYnF,EAAYqF,EAAQC,GAAKC,cAGtCL,KAFKM,UAGPN,KAFKM,aAWfV,EAAAE,UAAAS,SAAA,SALGC,GAMC,OALOR,KAAKC,UAAUO,IAW1BZ,EAAAE,UAAAW,0BAAA,SARGC,GASCV,KARKM,SAAWI,KA5BpB,GA8BOd,EAAPe,aACEC,KAAMC,EAAAA,UAAWC,OASjBC,SARU,mFASVC,WARWzB,OAIZK,EAADqB,eAAC,WAAA,UAEMrB,EAAPsB,gBAWApG,cAVkB8F,KAAMO,EAAAA,SC7CxB,IAAMC,GACJ5B,QAASC,EAAAA,cACTC,YAAaC,EAAAA,WAAW,WAAM,OAAA0B,IAC9BxB,OAAO,GAETwB,EAAA,WAAA,SAAAA,YAKAA,EAAAvB,UAAAS,SAAA,SAFGC,GAGC,OAFOlF,EAAOkF,MAJlB,GAMOa,EAAPV,aACEC,KAAMC,EAAAA,UAAWC,OAGjBC,SAFU,oEAGVC,WAFWI,OAIZC,EAADJ,eAAC,WAAA,UClBD,IAAMK,GACJ9B,QAASC,EAAAA,cACTC,YAAaC,EAAAA,WAAW,WAAM,OAAA4B,IAC9B1B,OAAO,GAET0B,EAAA,WAAA,SAAAA,YAKAA,EAAAzB,UAAAS,SAAA,SAFGC,GAGC,OAFOhF,EAAWgF,MAJtB,GAMOe,EAAPZ,aACEC,KAAMC,EAAAA,UAAWC,OAGjBC,SAFU,gFAGVC,WAFWM,OAIZC,EAADN,eAAC,WAAA,UClBD,IAAMO,GACJhC,QAASC,EAAAA,cACTC,YAAaC,EAAAA,WAAW,WAAM,OAAA8B,IAC9B5B,OAAO,GAET4B,EAAA,WAAA,SAAAA,YAKAA,EAAA3B,UAAAS,SAAA,SAFGC,GAGC,OAFOrE,EAAKqE,MAJhB,GAMOiB,EAAPd,aACEC,KAAMC,EAAAA,UAAWC,OAGjBC,SAFU,8DAGVC,WAFWQ,OAIZC,EAADR,eAAC,WAAA,UClBD,IAAMS,GACJlC,QAASC,EAAAA,cACTC,YAAaC,EAAAA,WAAW,WAAM,OAAAgC,IAC9B9B,OAAO,GAET8B,EAAA,WAAA,SAAAA,YAKAA,EAAA7B,UAAAS,SAAA,SAFGC,GAGC,OAFOpE,EAAQoE,MAJnB,GAMOmB,EAAPhB,aACEC,KAAMC,EAAAA,UAAWC,OAGjBC,SAFU,uEAGVC,WAFWU,OAIZC,EAADV,eAAC,WAAA,UClBD,IAAMW,GACJpC,QAASC,EAAAA,cACTC,YAAaC,EAAAA,WAAW,WAAM,OAAAkC,IAC9BhC,OAAO,GAETgC,EAAA,WAAA,SAAAA,YAKAA,EAAA/B,UAAAS,SAAA,SAFGC,GAGC,OAFOnE,EAAOmE,MAJlB,GAMOqB,EAAPlB,aACEC,KAAMC,EAAAA,UAAWC,OAGjBC,SAFU,oEAGVC,WAFWY,OAIZC,EAADZ,eAAC,WAAA,UClBD,IAAMa,GACJtC,QAASC,EAAAA,cACTC,YAAaC,EAAAA,WAAW,WAAM,OAAAoC,IAC9BlC,OAAO,GAETkC,EAAA,WAAA,SAAAA,YAKAA,EAAAjC,UAAAS,SAAA,SAFGC,GAGC,OAFOlE,EAAMkE,MAJjB,GAMOuB,EAAPpB,aACEC,KAAMC,EAAAA,UAAWC,OAGjBC,SAFU,iEAGVC,WAFWc,OAIZC,EAADd,eAAC,WAAA,UClBD,IAAMe,GACJxC,QAASC,EAAAA,cACTC,YAAaC,EAAAA,WAAW,WAAM,OAAAsC,IAC9BpC,OAAO,GAEToC,EAAA,WAAA,SAAAA,YAOAA,EAAAnC,UAAAC,SAAA,WACIC,KACKC,UAAY1D,EAAMyD,KAAKzD,QAKhC0F,EAAAnC,UAAAI,YAAA,SAFGC,GAGC,IAAK,IAFMC,KAAOD,EACJ,UAERC,IACFJ,KAFKC,UAAY1D,EAAM4D,EAAQC,GAAKC,cAGhCL,KAFKM,UAGPN,KAFKM,aAWf2B,EAAAnC,UAAAS,SAAA,SALGC,GAMC,OALOR,KAAKC,UAAUO,IAW1ByB,EAAAnC,UAAAW,0BAAA,SARGC,GASCV,KARKM,SAAWI,KA5BpB,GA8BOuB,EAAPtB,aACEC,KAAMC,EAAAA,UAAWC,OASjBC,SARU,iEASVC,WARWgB,OAIZC,EAADhB,eAAC,WAAA,UAEMgB,EAAPf,gBAWA3E,QAVYqE,KAAMO,EAAAA,SC7ClB,IAAMe,GACJ1C,QAASC,EAAAA,cACTC,YAAaC,EAAAA,WAAW,WAAM,OAAAwC,IAC9BtC,OAAO,GAETsC,EAAA,WAAA,SAAAA,YAMAA,EAAArC,UAAAC,SAAA,WACIC,KACKC,UAAYxD,EAAQuD,KAAKvD,UAKlC0F,EAAArC,UAAAS,SAAA,SAFGC,GAGC,OAFOR,KAAKC,UAAUO,MAZ1B,GAcO2B,EAAPxB,aACEC,KAAMC,EAAAA,UAAWC,OAGjBC,SAFU,uEAGVC,WAFWkB,OAIZC,EAADlB,eAAC,WAAA,UAEMkB,EAAPjB,gBAKAzE,UAJcmE,KAAMO,EAAAA,SC7BpB,IAAMiB,GACJ5C,QAASC,EAAAA,cACTC,YAAaC,EAAAA,WAAW,WAAM,OAAA0C,IAC9BxC,OAAO,GAETwC,EAAA,WAAA,SAAAA,YAOAA,EAAAvC,UAAAC,SAAA,WACIC,KACKC,UAAYnD,EAAGkD,KAAKlD,KAK7BuF,EAAAvC,UAAAI,YAAA,SAFGC,GAGC,IAAK,IAFMC,KAAOD,EACJ,OAERC,IACFJ,KAFKC,UAAYnD,EAAGqD,EAAQC,GAAKC,cAG7BL,KAFKM,UAGPN,KAFKM,aAWf+B,EAAAvC,UAAAS,SAAA,SALGC,GAMC,OALOR,KAAKC,UAAUO,IAW1B6B,EAAAvC,UAAAW,0BAAA,SARGC,GASCV,KARKM,SAAWI,KA5BpB,GA8BO2B,EAAP1B,aACEC,KAAMC,EAAAA,UAAWC,OASjBC,SARU,wDASVC,WARWoB,OAIZC,EAADpB,eAAC,WAAA,UAEMoB,EAAPnB,gBAWApE,KAVS8D,KAAMO,EAAAA,SC7Cf,IAAMmB,GACJ9C,QAASC,EAAAA,cACTC,YAAaC,EAAAA,WAAW,WAAM,OAAA4C,KAC9B1C,OAAO,GAET0C,GAAA,WAAA,SAAAA,YAOAA,EAAAzC,UAAAC,SAAA,WACIC,KACKC,UAAYlD,EAAIiD,KAAKjD,MAK9BwF,EAAAzC,UAAAI,YAAA,SAFGC,GAGC,IAAK,IAFMC,KAAOD,EACJ,QAERC,IACFJ,KAFKC,UAAYlD,EAAIoD,EAAQC,GAAKC,cAG9BL,KAFKM,UAGPN,KAFKM,aAWfiC,EAAAzC,UAAAS,SAAA,SALGC,GAMC,OALOR,KAAKC,UAAUO,IAW1B+B,EAAAzC,UAAAW,0BAAA,SARGC,GASCV,KARKM,SAAWI,KA5BpB,GA8BO6B,GAAP5B,aACEC,KAAMC,EAAAA,UAAWC,OASjBC,SARU,2DASVC,WARWsB,OAIZC,GAADtB,eAAC,WAAA,UAEMsB,GAAPrB,gBAWAnE,MAVU6D,KAAMO,EAAAA,SC7ChB,IAAMqB,IACJhD,QAASC,EAAAA,cACTC,YAAaC,EAAAA,WAAW,WAAM,OAAA8C,KAC9B5C,OAAO,GAET4C,GAAA,WAAA,SAAAA,YAKAA,EAAA3C,UAAAS,SAAA,SAFGC,GAGC,OAFOxD,EAAKwD,MAJhB,GAMOiC,GAAP9B,aACEC,KAAMC,EAAAA,UAAWC,OAGjBC,SAFU,8DAGVC,WAFWwB,QAIZC,GAADxB,eAAC,WAAA,UClBD,IAAMyB,IACJlD,QAASC,EAAAA,cACTC,YAAaC,EAAAA,WAAW,WAAM,OAAAgD,KAC9B9C,OAAO,GAET8C,GAAA,WAAA,SAAAA,YAOAA,EAAA7C,UAAAC,SAAA,WACIC,KACKC,UAAY7C,EAAG4C,KAAK5C,KAK7BuF,EAAA7C,UAAAI,YAAA,SAFGC,GAGC,IAAK,IAFMC,KAAOD,EACJ,OAERC,IACFJ,KAFKC,UAAY7C,EAAG+C,EAAQC,GAAKC,cAG7BL,KAFKM,UAGPN,KAFKM,aAWfqC,EAAA7C,UAAAS,SAAA,SALGC,GAMC,OALOR,KAAKC,UAAUO,IAW1BmC,EAAA7C,UAAAW,0BAAA,SARGC,GASCV,KARKM,SAAWI,KA5BpB,GA8BOiC,GAAPhC,aACEC,KAAMC,EAAAA,UAAWC,OASjBC,SARU,wDASVC,WARW0B,QAIZC,GAAD1B,eAAC,WAAA,UAEM0B,GAAPzB,gBAWA9D,KAVSwD,KAAMO,EAAAA,SC7Cf,IAAMyB,IACJpD,QAASC,EAAAA,cACTC,YAAaC,EAAAA,WAAW,WAAM,OAAAkD,KAC9BhD,OAAO,GAETgD,GAAA,WAAA,SAAAA,YAOAA,EAAA/C,UAAAC,SAAA,WACIC,KACKC,UAAY5C,EAAI2C,KAAK3C,MAK9BwF,EAAA/C,UAAAI,YAAA,SAFGC,GAGC,IAAK,IAFMC,KAAOD,EACJ,QAERC,IACFJ,KAFKC,UAAY5C,EAAI8C,EAAQC,GAAKC,cAG9BL,KAFKM,UAGPN,KAFKM,aAWfuC,EAAA/C,UAAAS,SAAA,SALGC,GAMC,OALOR,KAAKC,UAAUO,IAW1BqC,EAAA/C,UAAAW,0BAAA,SARGC,GASCV,KARKM,SAAWI,KA5BpB,GA8BOmC,GAAPlC,aACEC,KAAMC,EAAAA,UAAWC,OASjBC,SARU,2DASVC,WARW4B,QAIZC,GAAD5B,eAAC,WAAA,UAEM4B,GAAP3B,gBAWA7D,MAVUuD,KAAMO,EAAAA,SC7ChB,IAAM2B,IACJtD,QAASC,EAAAA,cACTC,YAAaC,EAAAA,WAAW,WAAM,OAAAoD,KAC9BlD,OAAO,GAETkD,GAAA,WAAA,SAAAA,YAOAA,EAAAjD,UAAAC,SAAA,WACIC,KACKC,UAAY3C,EAAI0C,KAAK1C,MAK9ByF,EAAAjD,UAAAI,YAAA,SAFGC,GAGC,IAAK,IAFMC,KAAOD,EACJ,QAERC,IACFJ,KAFKC,UAAY3C,EAAI6C,EAAQC,GAAKC,cAG9BL,KAFKM,UAGPN,KAFKM,aAWfyC,EAAAjD,UAAAS,SAAA,SALGC,GAMC,OALOR,KAAKC,UAAUO,IAW1BuC,EAAAjD,UAAAW,0BAAA,SARGC,GASCV,KARKM,SAAWI,KA5BpB,GA8BOqC,GAAPpC,aACEC,KAAMC,EAAAA,UAAWC,OASjBC,SARU,2DASVC,WARW8B,QAIZC,GAAD9B,eAAC,WAAA,UAEM8B,GAAP7B,gBAWA5D,MAVUsD,KAAMO,EAAAA,SC7ChB,IAAM6B,IACJxD,QAASC,EAAAA,cACTC,YAAaC,EAAAA,WAAW,WAAM,OAAAsD,KAC9BpD,OAAO,GAEToD,GAAA,WAAA,SAAAA,YAOAA,EAAAnD,UAAAC,SAAA,WACIC,KACKC,UAAYxC,EAAQuC,KAAKvC,UAKlCwF,EAAAnD,UAAAI,YAAA,SAFGC,GAGC,IAAK,IAFMC,KAAOD,EACJ,YAERC,IACFJ,KAFKC,UAAYxC,EAAQ0C,EAAQC,GAAKC,cAGlCL,KAFKM,UAGPN,KAFKM,aAWf2C,EAAAnD,UAAAS,SAAA,SALGC,GAMC,OALOR,KAAKC,UAAUO,IAW1ByC,EAAAnD,UAAAW,0BAAA,SARGC,GASCV,KARKM,SAAWI,KA5BpB,GA8BOuC,GAAPtC,aACEC,KAAMC,EAAAA,UAAWC,OASjBC,SARU,uEASVC,WARWgC,QAIZC,GAADhC,eAAC,WAAA,UAEMgC,GAAP/B,gBAWAzD,UAVcmD,KAAMO,EAAAA,SC7CpB,IAAM+B,IACJ1D,QAASC,EAAAA,cACTC,YAAaC,EAAAA,WAAW,WAAM,OAAAwD,KAC9BtD,OAAO,GAETsD,GAAA,WAAA,SAAAA,YAOAA,EAAArD,UAAAC,SAAA,WACIC,KACKC,UAAYnC,EAAIkC,KAAKlC,MAK9BqF,EAAArD,UAAAI,YAAA,SAFGC,GAGC,IAAK,IAFMC,KAAOD,EACJ,QAERC,IACFJ,KAFKC,UAAYnC,EAAIqC,EAAQC,GAAKC,cAG9BL,KAFKM,UAGPN,KAFKM,aAWf6C,EAAArD,UAAAS,SAAA,SALGC,GAMC,OALOR,KAAKC,UAAUO,IAW1B2C,EAAArD,UAAAW,0BAAA,SARGC,GASCV,KARKM,SAAWI,KA5BpB,GA8BOyC,GAAPxC,aACEC,KAAMC,EAAAA,UAAWC,OASjBC,SARU,2DASVC,WARWkC,QAIZC,GAADlC,eAAC,WAAA,UAEMkC,GAAPjC,gBAWApD,MAVU8C,KAAMO,EAAAA,SC7ChB,IAAMiC,IACJ5D,QAASC,EAAAA,cACTC,YAAaC,EAAAA,WAAW,WAAM,OAAA0D,KAC9BxD,OAAO,GAETwD,GAAA,WAAA,SAAAA,YAOAA,EAAAvD,UAAAC,SAAA,WACIC,KACKC,UAAYlC,EAAQiC,KAAKjC,UAKlCsF,EAAAvD,UAAAI,YAAA,SAFGC,GAGC,IAAK,IAFMC,KAAOD,EACJ,YAERC,IACFJ,KAFKC,UAAYlC,EAAQoC,EAAQC,GAAKC,cAGlCL,KAFKM,UAGPN,KAFKM,aAWf+C,EAAAvD,UAAAS,SAAA,SALGC,GAMC,OALOR,KAAKC,UAAUO,IAW1B6C,EAAAvD,UAAAW,0BAAA,SARGC,GASCV,KARKM,SAAWI,KA5BpB,GA8BO2C,GAAP1C,aACEC,KAAMC,EAAAA,UAAWC,OASjBC,SARU,uEASVC,WARWoC,QAIZC,GAADpC,eAAC,WAAA,UAEMoC,GAAPnC,gBAWAnD,UAVc6C,KAAMO,EAAAA,SC7CpB,IAAMmC,IACJ9D,QAASC,EAAAA,cACTC,YAAaC,EAAAA,WAAW,WAAM,OAAA4D,KAC9B1D,OAAO,GAET0D,GAAA,WAAA,SAAAA,YAOAA,EAAAzD,UAAAC,SAAA,WACIC,KACKC,UAAYjC,EAASgC,KAAKhC,WAKnCuF,EAAAzD,UAAAI,YAAA,SAFGC,GAGC,IAAK,IAFMC,KAAOD,EACJ,aAERC,IACFJ,KAFKC,UAAYjC,EAASmC,EAAQC,GAAKC,cAGnCL,KAFKM,UAGPN,KAFKM,aAWfiD,EAAAzD,UAAAS,SAAA,SALGC,GAMC,OALOR,KAAKC,UAAUO,IAW1B+C,EAAAzD,UAAAW,0BAAA,SARGC,GASCV,KARKM,SAAWI,KA5BpB,GA8BO6C,GAAP5C,aACEC,KAAMC,EAAAA,UAAWC,OASjBC,SARU,0EASVC,WARWsC,QAIZC,GAADtC,eAAC,WAAA,UAEMsC,GAAPrC,gBAWAlD,WAVe4C,KAAMO,EAAAA,SC7CrB,IAAMqC,IACJhE,QAASC,EAAAA,cACTC,YAAaC,EAAAA,WAAW,WAAM,OAAA8D,KAC9B5D,OAAO,GAET4D,GAAA,WAAA,SAAAA,YAMAA,EAAA3D,UAAAC,SAAA,WACIC,KACKC,UAAYhC,EAAW+B,KAAK/B,aAKrCwF,EAAA3D,UAAAS,SAAA,SAFGC,GAGC,OAFOR,KAAKC,UAAUO,MAZ1B,GAcOiD,GAAP9C,aACEC,KAAMC,EAAAA,UAAWC,OAGjBC,SAFU,gFAGVC,WAFWwC,QAIZC,GAADxC,eAAC,WAAA,UAEMwC,GAAPvC,gBAKAjD,aAJiB2C,KAAMO,EAAAA,SC7BvB,IAAMuC,IACJlE,QAASC,EAAAA,cACTC,YAAaC,EAAAA,WAAW,WAAM,OAAAgE,KAC9B9D,OAAO,GAET8D,GAAA,WAAA,SAAAA,YAKAA,EAAA7D,UAAAS,SAAA,SAFGC,GAGC,OAFOrC,EAAOqC,MAJlB,GAMOmD,GAAPhD,aACEC,KAAMC,EAAAA,UAAWC,OAGjBC,SAFU,oEAGVC,WAFW0C,QAIZC,GAAD1C,eAAC,WAAA,UClBD,IAAM2C,IACJpE,QAASC,EAAAA,cACTC,YAAaC,EAAAA,WAAW,WAAM,OAAAkE,KAC9BhE,OAAO,GAETgE,GAAA,WAAA,SAAAA,YAOAA,EAAA/D,UAAAC,SAAA,WACIC,KACKC,UAAY7B,EAAS4B,KAAK5B,WAKnCyF,EAAA/D,UAAAI,YAAA,SAFGC,GAGC,IAAK,IAFMC,KAAOD,EACJ,aAERC,IACFJ,KAFKC,UAAY7B,EAAS+B,EAAQC,GAAKC,cAGnCL,KAFKM,UAGPN,KAFKM,aAWfuD,EAAA/D,UAAAS,SAAA,SALGC,GAMC,OALOR,KAAKC,UAAUO,IAW1BqD,EAAA/D,UAAAW,0BAAA,SARGC,GASCV,KARKM,SAAWI,KA5BpB,GA8BOmD,GAAPlD,aACEC,KAAMC,EAAAA,UAAWC,OASjBC,SARU,0EASVC,WARW4C,QAIZC,GAAD5C,eAAC,WAAA,UAEM4C,GAAP3C,gBAWA9C,WAVewC,KAAMO,EAAAA,SC7CrB,IAAM2C,IACJtE,QAASC,EAAAA,cACTC,YAAaC,EAAAA,WAAW,WAAM,OAAAoE,KAC9BlE,OAAO,GAETkE,GAAA,WAAA,SAAAA,YAOAA,EAAAjE,UAAAC,SAAA,WACIC,KACKC,UAAYtB,EAAMqB,KAAKrB,QAKhCoF,EAAAjE,UAAAI,YAAA,SAFGC,GAGC,IAAK,IAFMC,KAAOD,EACJ,UAERC,IACFJ,KAFKC,UAAYtB,EAAMwB,EAAQC,GAAKC,cAGhCL,KAFKM,UAGPN,KAFKM,aAWfyD,EAAAjE,UAAAS,SAAA,SALGC,GAMC,OALOR,KAAKC,UAAUO,IAW1BuD,EAAAjE,UAAAW,0BAAA,SARGC,GASCV,KARKM,SAAWI,KA5BpB,GA8BOqD,GAAPpD,aACEC,KAAMC,EAAAA,UAAWC,OASjBC,SARU,iEASVC,WARW8C,QAIZC,GAAD9C,eAAC,WAAA,UAEM8C,GAAP7C,gBAWAvC,QAVYiC,KAAMO,EAAAA,SC7ClB,IAAM6C,IACJxE,QAASC,EAAAA,cACTC,YAAaC,EAAAA,WAAW,WAAM,OAAAsE,KAC9BpE,OAAO,GAEToE,GAAA,WAAA,SAAAA,YAOAA,EAAAnE,UAAAC,SAAA,WACIC,KACKC,UAAYrB,EAAYoB,KAAKpB,cAKtCqF,EAAAnE,UAAAI,YAAA,SAFGC,GAGC,IAAK,IAFMC,KAAOD,EACJ,gBAERC,IACFJ,KAFKC,UAAYrB,EAAYuB,EAAQC,GAAKC,cAGtCL,KAFKM,UAGPN,KAFKM,aAWf2D,EAAAnE,UAAAS,SAAA,SALGC,GAMC,OALOR,KAAKC,UAAUO,IAW1ByD,EAAAnE,UAAAW,0BAAA,SARGC,GASCV,KARKM,SAAWI,KA5BpB,GA8BOuD,GAAPtD,aACEC,KAAMC,EAAAA,UAAWC,OASjBC,SARU,mFASVC,WARWgD,QAIZC,GAADhD,eAAC,WAAA,UAEMgD,GAAP/C,gBAWAtC,cAVkBgC,KAAMO,EAAAA,SC7CxB,IAAM+C,IACJ1E,QAASC,EAAAA,cACTC,YAAaC,EAAAA,WAAW,WAAM,OAAAwE,KAC9BtE,OAAO,GAETsE,GAAA,WAAA,SAAAA,YAKAA,EAAArE,UAAAS,SAAA,SAFGC,GAGC,OAFOlB,EAAIkB,MAJf,GAMO2D,GAAPxD,aACEC,KAAMC,EAAAA,UAAWC,OAGjBC,SAFU,2DAGVC,WAFWkD,QAIZC,GAADlD,eAAC,WAAA,UClBD,IAAMmD,IACJ5E,QAASC,EAAAA,cACTC,YAAaC,EAAAA,WAAW,WAAM,OAAA0E,KAC9BxE,OAAO,GAETwE,GAAA,WAAA,SAAAA,YAOAA,EAAAvE,UAAAC,SAAA,WACIC,KACKC,UAAYf,EAAKc,KAAKd,OAK/BmF,EAAAvE,UAAAI,YAAA,SAFGC,GAGC,IAAK,IAFMC,KAAOD,EACJ,SAERC,IACFJ,KAFKC,UAAYf,EAAKiB,EAAQC,GAAKC,cAG/BL,KAFKM,UAGPN,KAFKM,aAWf+D,EAAAvE,UAAAS,SAAA,SALGC,GAMC,OALOR,KAAKC,UAAUO,IAW1B6D,EAAAvE,UAAAW,0BAAA,SARGC,GASCV,KARKM,SAAWI,KA5BpB,GA8BO2D,GAAP1D,aACEC,KAAMC,EAAAA,UAAWC,OASjBC,SARU,8DASVC,WARWoD,QAIZC,GAADpD,eAAC,WAAA,UAEMoD,GAAPnD,gBAWAhC,OAVW0B,KAAMO,EAAAA,SCMV,IAAMmD,IACXxJ,YAAFA,EACEQ,OAAFA,EACEE,WAAFA,EACEW,KAAFA,EACEC,QAAFA,EACEC,OAAFA,EACEC,MAAFA,EACEC,MAAFA,EACEE,QAAFA,EACEK,GAAFA,EACEC,IAAFA,EACEC,KAAFA,EACEI,GAAFA,EACEC,IAAFA,EACEC,IAAFA,EACEG,QAAFA,EACEK,IAAFA,EACEC,QAAFA,EACEC,SAAFA,EACEC,WAAFA,EACEE,OAAFA,EACEC,SAAFA,EACEO,MAAFA,EACEC,YAAFA,EACEU,IAAFA,EACEJ,KAAFA,GAGMqF,IACJ3E,EACAyB,EACAE,EACAE,EACAE,EACAE,EACAE,EACAE,EACAE,EACAE,EACAE,GACAE,GACAE,GACAE,GACAE,GACAE,GACAE,GACAE,GACAE,GACAE,GACAE,GACAE,GACAE,GACAE,GACAE,GACAE,IAEFG,GAAA,kBAAA,aAAA,GAEwCA,GAAxC7D,aACEC,KAAM6D,EAAAA,SAAU3D,OADhB4D,cAEcH,IADdI,SAESJ,QAIVC,GAADvD,eAAC,WAAA"}
